[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Scott's Data Science Blog",
    "section": "",
    "text": "Hi,\nThanks for visiting my blog! I decided to start writing these articles to share with others how I do Data Science. I enjoy exploring data to solve real world problems. For this blog, I have created a set of Jupyter notebooks – each telling a story about a specific problem. I try to keep the descriptions light, so the code and the visualizations tell the real story. Each article has a corresponding Jupyter notebook. You can read the articles below, or download my notebooks on GitHub.\nNote that I am currently looking for a new job as a Data Scientist. Please visit my profile on LinkedIn to learn more about me.\nI hope you enjoy swied.com.\nThanks,\nScott"
  },
  {
    "objectID": "index.html#articles",
    "href": "index.html#articles",
    "title": "Scott's Data Science Blog",
    "section": "Articles",
    "text": "Articles"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog About this blogAbout this blogAbout this blogAbout this blogAbout this blogAbout this blogAbout this blogAbout this blogAbout this blogAbout this blogAbout this blogAbout this blogAbout this blogAbout this blogAbout this blogAbout this blogAbout this blogAbout this blogAbout this blogAbout this blogAbout this blog"
  },
  {
    "objectID": "posts/make-a-ringtone-sound/make-a-ringtone-sound.html",
    "href": "posts/make-a-ringtone-sound/make-a-ringtone-sound.html",
    "title": "Play the audio for the old US ringtone",
    "section": "",
    "text": "The old Bell telphone ringtone was a two second tone composed of the frequencies 400 Hz and 480 Hz. The tone was followed by a four second pause, and then repeated. This ringtone continues to be used in the US with most mobile/landline carriers, and PBX systems. Read more about this, and other international ringtones, at https://en.wikipedia.org/wiki/Ringing_tone.\nHere is a recording of the US ringtone.\n\nfrom IPython.display import Audio\n\nAudio(url=\"https://upload.wikimedia.org/wikipedia/commons/c/cd/US_ringback_tone.ogg\")\n\n\n                \n                    \n                    Your browser does not support the audio element.\n                \n              \n\n\nLet’s start with some basics before jumping into recreating this ringtone."
  },
  {
    "objectID": "posts/make-a-ringtone-sound/make-a-ringtone-sound.html#basics-of-audio-frequencies",
    "href": "posts/make-a-ringtone-sound/make-a-ringtone-sound.html#basics-of-audio-frequencies",
    "title": "Play the audio for the old US ringtone",
    "section": "2 Basics of audio frequencies",
    "text": "2 Basics of audio frequencies\nThe sound we hear is produced by longitudinal pressure waves in air particles. These waves cause your ear drum to vibrate. A pure tone is produced when you hear an unchanging frequency with a sinusoidal waveform.\nThe basic equation of a sinusoidal waveform:\n\\(y(t) =  sin  \\left({  2 \\pi f t  }\\right)\\)\nWhere, \\(t\\) is the time value, and \\(f\\) = wave frequency (Hertz).\n\n2.1 Symbolic equations in Python\nIf you are exploring a problem it can be helpful to start with symbolic computation. The Sympy package in Python allows you to operate on and simplify algebraic equations. Then, when you are ready, you can easily convert your equations into numerical form (e.q., a Numpy array).\nDefine sinusoidal waveform equation as a symbolic equation.\n\nimport sympy as s\n\n# Define variables as Sympy symbols\nt, f = s.symbols('t f')\n\n# Define Sympy equation\ny = s.sin(2*s.pi*t*f)\n\n\n# Use pretty print (pprint) to diplay this equation \ns.pprint(y)\n\nsin(2⋅π⋅f⋅t)\n\n\n\n\n2.2 Musical notes\nLet’s use \\(f_1=256\\)Hz (Middle-c), and \\(f_2=440\\)Hz (The A note above middle-c).\n\n# Substitue values f1 and f2 in the equation for y\ny_at_256_hz = y.subs(f, 256)\ny_at_440_hz = y.subs(f, 440)\n\n\n# Show the new equations\ns.pprint(y_at_256_hz)\ns.pprint(y_at_440_hz)\n\nsin(512⋅π⋅t)\nsin(880⋅π⋅t)\n\n\n\n\n2.3 Plot Middle-C and A-440 on a graph\nLet’s plot these example frequencies together on a graph. Note that we don’t have to transform our equations into numerical lists before plotting them. Sympy does this for us. We just need to provide a plot range.\n\nplot_range = (t, 0, 1/256)\n\n# Plot the curve for middle-c\np = s.plot(\n    y_at_256_hz, plot_range, \n    line_color='gray',\n    title=f'Frequencies 256Hz, and 440Hz',\n    show=False)\n\n# Add the curve for A-440 to the graph\np.extend(s.plot(\n    y_at_440_hz, plot_range, \n    line_color='green',\n    show=False, adaptive=False))\n\n# Format the graph and display it\np.size = (6,5)\np.show()\n\n\n\n\n\n\n2.4 Convert Sympy equations to numeric lists\nIn order to listen to these two notes we need to convert the equations into numerical time series.\n\n# Convert our Sympy equations into \n# Python lambda functions\nlambda_y_256 = s.lambdify(t, y_at_256_hz)\nlambda_y_440 = s.lambdify(t, y_at_440_hz)\n\n\n# Define numberic values for f1, and f2\nf_256, f_440 = (256, 440)\n# Number of samples per cycle\nn = 50\n# Number of seconds of play time\nplay_time = 3\n# Sampling period in micro-seconds\nt_256_delta = int(1e6/n/f_256)\nt_440_delta = int(1e6/n/f_440) \n# Total play time in micro-seconds\nt_max = int(play_time*1e6)\n\n\n# Iterators for each time series\nts_256_range = range(0, t_max, t_256_delta)\nts_440_range = range(0, t_max, t_440_delta)\n\n# Generate numeric lists\nts_256 = [lambda_y_256(t/1e6) \n          for t \n          in ts_256_range]\nts2_440 = [lambda_y_440(t/1e6) \n           for t \n           in ts_440_range]\n\n\n\n2.5 Play sounds for Middle-C and A-440\n\nAudio(ts_256, rate=f_256*n)\n\n\n                \n                    \n                    Your browser does not support the audio element.\n                \n              \n\n\n\nAudio(ts2_440, rate=f_440*n)\n\n\n                \n                    \n                    Your browser does not support the audio element."
  },
  {
    "objectID": "posts/make-a-ringtone-sound/make-a-ringtone-sound.html#recreate-the-us-ringtone",
    "href": "posts/make-a-ringtone-sound/make-a-ringtone-sound.html#recreate-the-us-ringtone",
    "title": "Play the audio for the old US ringtone",
    "section": "3 Recreate the US ringtone",
    "text": "3 Recreate the US ringtone\nIn the United States, the ringtone for phones has historically been a two second tone composed of the frequencies 400 Hz and 480 Hz. The tone is followed by a four second pause, and then repeated until somebody answers.\n\n3.1 Acustic Equations\nWhen multiple sound waves overlap, their amplitudes add together. This is call superposition.\n\\(y_{super}(t) =  sin  \\left({  2 \\pi f_1 t  }\\right)  +  sin  \\left({  2 \\pi f_2 t  }\\right)\\)\nWhere the beat frequency (\\(f_{beat}\\)) is defined as\n\\(f_{beat} = \\lvert f_1 - f_2 \\rvert\\),\nand the beat waveform equation (\\(y_{beat}\\)) is defined as\n\\(y_{beat}(t) =  2 \\cdot  cos  \\left({  2 \\pi f_{beat} t  }\\right)\\)\n\n# Define variables as Sympy symbols\nt, f = s.symbols('t f')\n\n# Define Sympy equations\ny = s.sin(2*s.pi*t*f)\ny_beat = 2*s.cos(s.pi*t*f)\n\n\n# Define the two numeric frequencies\nf1 = 400\nf2 = 440\n# Calculate beat frequency\nf_beat = abs(f1-f2)\n\n# Substitute in the numeric values\ny_super = y.subs(f, f1) + y.subs(f, f2)\ny_beat = y_beat.subs(f, f_beat)\n\n\n# Pretty print the simplified equations\ns.pprint(y_super)\ns.pprint(y_beat)\n\nsin(800⋅π⋅t) + sin(880⋅π⋅t)\n2⋅cos(40⋅π⋅t)\n\n\n\n\n3.2 Plot superpositioned waveforms on a graph\nPlot the superpositioned frequencies along with the curve for the beat frequency.\n\nplot_range = (t, 0, 2/f_beat)\n\n# Plot the superpositioned waveform in gray\np = s.plot(\n    y_super, plot_range, line_color='gray',\n    title=f'Superposition {f1}Hz, and {f2}Hz',\n    show=False, adaptive=False)\n\n# Plot, on the same graph, the beat frequency \n# function in green.\np.extend(\n    s.plot(y_beat, plot_range, \n           line_color='green', \n           show=False, adaptive=False))\np.size = (6,5)\np.show()\n\n\n\n\nDefine a Numpy array as a time series of values from the symbolic equation \\(y_{super}(t)\\). Then we can feed the arry into the Audio function, and listen to it.\n\n\n3.3 Convert Sympy equations to numeric lists\n\n# Create a numpy array from y_super\ny_ringtone = s.lambdify(t, y_super)\n\n# Period of the maximum frequency\nT_max = 1/max(f1,f2)\nn = 50 # Number of samples per cycle\nplay_time = 2 # Number of seconds of play time\n\n# sampling period\nt_delta = int(1e6*T_max/n)  # micro-seconds\n# total play time\nt_max = int(play_time*1e6)  # micro-seconds\n\n# Create the time series as a list\nts_ringtone = [\n   y_ringtone(t/1e6) \n   for t \n   in range(0,t_max, t_delta)]\n\npause_4sec = [\n    0.0\n    for t \n    in range(0,2*t_max,t_delta)]\n\n\n\n3.4 Play the ringtone sound\n\naudio_sampling_rate = max(f1,f2)*n\n\nprint('audio_sampling_rate =', \n      audio_sampling_rate, 'Hz')\n\naudio_sampling_rate = 22000 Hz\n\n\n\nAudio(ts_ringtone + pause_4sec + ts_ringtone, \n      rate=audio_sampling_rate)\n\n\n                \n                    \n                    Your browser does not support the audio element."
  },
  {
    "objectID": "posts/stock_ticker_data/stock_ticker_data.html",
    "href": "posts/stock_ticker_data/stock_ticker_data.html",
    "title": "Get financial reporting data, by stock ticker, from the data.sec.gov API",
    "section": "",
    "text": "import requests\nimport json\nfrom pprint import pprint\nimport pandas as pd\nimport numpy as np\nimport re\nimport matplotlib.pyplot as plt"
  },
  {
    "objectID": "posts/stock_ticker_data/stock_ticker_data.html#parameters",
    "href": "posts/stock_ticker_data/stock_ticker_data.html#parameters",
    "title": "Get financial reporting data, by stock ticker, from the data.sec.gov API",
    "section": "2 Parameters",
    "text": "2 Parameters\n\n# Which company do you wish to track?\nticker = 'AAPL'\n\n# An email address needs to be included in the URL of the API\nemail_address = 'your-email@example.com'"
  },
  {
    "objectID": "posts/stock_ticker_data/stock_ticker_data.html#find-the-cik-number-for-the-chosen-stock-ticker",
    "href": "posts/stock_ticker_data/stock_ticker_data.html#find-the-cik-number-for-the-chosen-stock-ticker",
    "title": "Get financial reporting data, by stock ticker, from the data.sec.gov API",
    "section": "3 Find the CIK number for the chosen stock ticker",
    "text": "3 Find the CIK number for the chosen stock ticker\n\n3.1 Query the sec.gov API\n\n# Run the API request   \nrequest_info = (\n    requests\n    .get('https://sec.gov/files/company_tickers_exchange.json')\n)\n\n# Print the returned status code (200 is good, 404 is bad)\nprint(\"Request status code:\", request_info.status_code)\nprint(\"Content Type:\", request_info.headers['Content-Type'])\nprint(\"Content Length:\", request_info.headers['Content-Length'], \n      'bytes')\n\nRequest status code: 200\nContent Type: application/json\nContent Length: 212959 bytes\n\n\n\n# Convert json data to Python dict format\nrequest_data = request_info.json()\n\n\n\n3.2 Explore the data that was returned\n\n# List the dictionary keys \nprint(\"request_data:\", request_data.keys())\n\nrequest_data: dict_keys(['fields', 'data'])\n\n\n\nrequest_data['fields']\n\n['cik', 'name', 'ticker', 'exchange']\n\n\n\nrequest_data['data'][0:10]\n\n[[320193, 'Apple Inc.', 'AAPL', 'Nasdaq'],\n [789019, 'MICROSOFT CORP', 'MSFT', 'Nasdaq'],\n [1067983, 'BERKSHIRE HATHAWAY INC', 'BRK-B', 'NYSE'],\n [731766, 'UNITEDHEALTH GROUP INC', 'UNH', 'NYSE'],\n [34088, 'EXXON MOBIL CORP', 'XOM', 'NYSE'],\n [200406, 'JOHNSON & JOHNSON', 'JNJ', 'NYSE'],\n [19617, 'JPMORGAN CHASE & CO', 'JPM', 'NYSE'],\n [104169, 'Walmart Inc.', 'WMT', 'NYSE'],\n [1045810, 'NVIDIA CORP', 'NVDA', 'Nasdaq'],\n [93410, 'CHEVRON CORP', 'CVX', 'NYSE']]\n\n\n\n\n3.3 Create a Pandas dataframe from the API content\n\n# Create a new dataframe\ndf_tickers = (\n    pd.DataFrame(data=request_data['data'], \n                 columns=request_data['fields'])\n    .set_index('ticker')\n)\n\n# Display the top few rows\ndf_tickers.head()\n\n\n\n\n\n  \n    \n      \n      cik\n      name\n      exchange\n    \n    \n      ticker\n      \n      \n      \n    \n  \n  \n    \n      AAPL\n      320193\n      Apple Inc.\n      Nasdaq\n    \n    \n      MSFT\n      789019\n      MICROSOFT CORP\n      Nasdaq\n    \n    \n      BRK-B\n      1067983\n      BERKSHIRE HATHAWAY INC\n      NYSE\n    \n    \n      UNH\n      731766\n      UNITEDHEALTH GROUP INC\n      NYSE\n    \n    \n      XOM\n      34088\n      EXXON MOBIL CORP\n      NYSE\n    \n  \n\n\n\n\n\n# Slice the dataframe to show only the row where ticker=='AAPL'\ndf_tickers.query(f\"ticker=='{ticker}'\")\n\n\n\n\n\n  \n    \n      \n      cik\n      name\n      exchange\n    \n    \n      ticker\n      \n      \n      \n    \n  \n  \n    \n      AAPL\n      320193\n      Apple Inc.\n      Nasdaq\n    \n  \n\n\n\n\n\n\n3.4 Create a function to pull data for a single ticker and format the CIK as a string\nThis is necessary because in the next section we will need to add a formatted CID to the API call.\n\ndef get_cik_string(ticker_data, ticker_symbol):\n    ticker_symbol = ticker_symbol.upper()\n    data_slice = ticker_data.loc[[ticker_symbol],['cik']]\n    cik_value = data_slice.values[0][0]\n    cik_string = 'CIK' + str(cik_value).rjust(10, '0')\n    return cik_string\n\n\n# Example for our ticker\nprint(\"ticker:\", ticker)\nprint(\"CIK:\",    get_cik_string(df_tickers, ticker))\n\nticker: AAPL\nCIK: CIK0000320193"
  },
  {
    "objectID": "posts/stock_ticker_data/stock_ticker_data.html#get-financial-data-from-the-data.sec.gov-api-for-a-specific-xbrl-line-item-tag",
    "href": "posts/stock_ticker_data/stock_ticker_data.html#get-financial-data-from-the-data.sec.gov-api-for-a-specific-xbrl-line-item-tag",
    "title": "Get financial reporting data, by stock ticker, from the data.sec.gov API",
    "section": "4 Get financial data from the data.sec.gov api for a specific XBRL line item tag",
    "text": "4 Get financial data from the data.sec.gov api for a specific XBRL line item tag\n\n# Build up the request URL\ncik = get_cik_string(df_tickers, ticker)\ntag = 'Assets'\ndomain = 'https://data.sec.gov'\nurl = f\"{domain}/api/xbrl/companyconcept/{cik}/us-gaap/{tag}.json\"\n\n# Run the API request   \nrequest_tag_data = (requests\n                    .get(url, \n                         headers={'User-Agent': email_address})\n                   )\n\n# Print the status code (200 is good, 404 is bad)\nprint(\"Request status code:\", request_tag_data.status_code)\nprint(\"Content Type:\", request_tag_data.headers['Content-Type'])\nprint(\"Content Length:\", \n      request_tag_data.headers['Content-Length'], 'bytes')\n\nRequest status code: 200\nContent Type: application/json\nContent Length: 2052 bytes\n\n\n\ntag_data = request_tag_data.json()\n\npprint(tag_data, depth=2)\n\n{'cik': 320193,\n 'description': 'Sum of the carrying amounts as of the balance sheet date of '\n                'all assets that are recognized. Assets are probable future '\n                'economic benefits obtained or controlled by an entity as a '\n                'result of past transactions or events.',\n 'entityName': 'Apple Inc.',\n 'label': 'Assets',\n 'tag': 'Assets',\n 'taxonomy': 'us-gaap',\n 'units': {'USD': [...]}}\n\n\n\ndf_tag_data = pd.DataFrame.from_dict(tag_data['units']['USD'])\n\n\ndf_tag_data\n\n\n\n\n\n  \n    \n      \n      end\n      val\n      accn\n      fy\n      fp\n      form\n      filed\n      frame\n    \n  \n  \n    \n      0\n      2008-09-27\n      39572000000\n      0001193125-09-153165\n      2009\n      Q3\n      10-Q\n      2009-07-22\n      NaN\n    \n    \n      1\n      2008-09-27\n      39572000000\n      0001193125-09-214859\n      2009\n      FY\n      10-K\n      2009-10-27\n      NaN\n    \n    \n      2\n      2008-09-27\n      36171000000\n      0001193125-10-012091\n      2009\n      FY\n      10-K/A\n      2010-01-25\n      NaN\n    \n    \n      3\n      2008-09-27\n      36171000000\n      0001193125-10-238044\n      2010\n      FY\n      10-K\n      2010-10-27\n      CY2008Q3I\n    \n    \n      4\n      2009-06-27\n      48140000000\n      0001193125-09-153165\n      2009\n      Q3\n      10-Q\n      2009-07-22\n      CY2009Q2I\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      111\n      2021-09-25\n      351002000000\n      0000320193-22-000108\n      2022\n      FY\n      10-K\n      2022-10-28\n      CY2021Q3I\n    \n    \n      112\n      2021-12-25\n      381191000000\n      0000320193-22-000007\n      2022\n      Q1\n      10-Q\n      2022-01-28\n      CY2021Q4I\n    \n    \n      113\n      2022-03-26\n      350662000000\n      0000320193-22-000059\n      2022\n      Q2\n      10-Q\n      2022-04-29\n      CY2022Q1I\n    \n    \n      114\n      2022-06-25\n      336309000000\n      0000320193-22-000070\n      2022\n      Q3\n      10-Q\n      2022-07-29\n      CY2022Q2I\n    \n    \n      115\n      2022-09-24\n      352755000000\n      0000320193-22-000108\n      2022\n      FY\n      10-K\n      2022-10-28\n      CY2022Q3I\n    \n  \n\n116 rows × 8 columns"
  },
  {
    "objectID": "posts/stock_ticker_data/stock_ticker_data.html#plot-trend-data",
    "href": "posts/stock_ticker_data/stock_ticker_data.html#plot-trend-data",
    "title": "Get financial reporting data, by stock ticker, from the data.sec.gov API",
    "section": "5 Plot trend data",
    "text": "5 Plot trend data\n\n5.1 Create a table of plot data\n\n# Filter rows to only those with current year (CY) labels\nstarts_with_cy = lambda x: bool(isinstance(re.search(r'^CY', x), re.Match))\nx_axis_name = 'End Date'\ny_axis_name = f'{tag} (USD in Billions)'\n\ndf_plot_data = (\n    df_tag_data\n    .query(\"form == '10-Q'\")\n    .assign(yr_mon = lambda x: [f\"{y[0]}-{y[1]}\" for y in zip(x.fy, x.fp)] )\n    .assign(filter_flag = lambda x: [starts_with_cy(str(y)) for y in x.frame])\n    .query(\"filter_flag==True\")\n    .filter(['end', 'val'])\n    .assign(val = lambda x: x.val/1000000000)\n    .rename(columns={'end':x_axis_name, 'val':y_axis_name})\n    .sort_values(by=x_axis_name)\n)\n\ndf_plot_data.tail(10)\n\n\n\n\n\n  \n    \n      \n      End Date\n      Assets (USD in Billions)\n    \n  \n  \n    \n      90\n      2019-06-29\n      322.239\n    \n    \n      96\n      2019-12-28\n      340.618\n    \n    \n      97\n      2020-03-28\n      320.400\n    \n    \n      98\n      2020-06-27\n      317.344\n    \n    \n      104\n      2020-12-26\n      354.054\n    \n    \n      105\n      2021-03-27\n      337.158\n    \n    \n      106\n      2021-06-26\n      329.840\n    \n    \n      112\n      2021-12-25\n      381.191\n    \n    \n      113\n      2022-03-26\n      350.662\n    \n    \n      114\n      2022-06-25\n      336.309\n    \n  \n\n\n\n\n\n\n5.2 Draw a line chart\n\ndf_plot_data.plot(kind = 'line', x = x_axis_name, y = y_axis_name, \n                  figsize=(10, 6), title = f\"{ticker} {tag}\")\nplt.show()"
  }
]