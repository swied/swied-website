[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Scott's Data Science Blog",
    "section": "",
    "text": "Hi,\nThanks for visiting my blog! I decided to start writing these articles in order to share with others how I do Data Science. It is also meant to demonstrate my skill set to prospective employers. I am currently looking for a new job. Please visit my profile on LinkedIn to learn more about me.\nI hope you enjoy swied.com.\nThanks,\nScott\n\n\nArticles\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGet financial reporting data, by stock ticker, from the data.sec.gov API\n\n\n\nPandas\nAPI's\nMatplotlib\nFinance\nPython\n\n\n\nA notebook, with code, showing how to pull data from a couple of sec.gov web API’s\n\n\n\nNov 6, 2022\nScott Wied\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog About this blogAbout this blogAbout this blogAbout this blogAbout this blogAbout this blogAbout this blogAbout this blogAbout this blogAbout this blogAbout this blogAbout this blogAbout this blogAbout this blogAbout this blogAbout this blogAbout this blogAbout this blogAbout this blogAbout this blogAbout this blog"
  },
  {
    "objectID": "posts/stock_ticker_data/stock_ticker_data.html",
    "href": "posts/stock_ticker_data/stock_ticker_data.html",
    "title": "Get financial reporting data, by stock ticker, from the data.sec.gov API",
    "section": "",
    "text": "import requests\nimport json\nfrom pprint import pprint\nimport pandas as pd\nimport numpy as np\nimport re\nimport matplotlib.pyplot as plt"
  },
  {
    "objectID": "posts/stock_ticker_data/stock_ticker_data.html#parameters",
    "href": "posts/stock_ticker_data/stock_ticker_data.html#parameters",
    "title": "Get financial reporting data, by stock ticker, from the data.sec.gov API",
    "section": "2 Parameters",
    "text": "2 Parameters\n\n# Which company do you wish to track?\nticker = 'AAPL'\n\n# An email address needs to be included in the URL of the API\nemail_address = 'your-email@example.com'"
  },
  {
    "objectID": "posts/stock_ticker_data/stock_ticker_data.html#find-the-cik-number-for-the-chosen-stock-ticker",
    "href": "posts/stock_ticker_data/stock_ticker_data.html#find-the-cik-number-for-the-chosen-stock-ticker",
    "title": "Get financial reporting data, by stock ticker, from the data.sec.gov API",
    "section": "3 Find the CIK number for the chosen stock ticker",
    "text": "3 Find the CIK number for the chosen stock ticker\n\n3.1 Query the sec.gov API\n\n# Run the API request   \nrequest_info = (\n    requests\n    .get('https://sec.gov/files/company_tickers_exchange.json')\n)\n\n# Print the returned status code (200 is good, 404 is bad)\nprint(\"Request status code:\", request_info.status_code)\nprint(\"Content Type:\", request_info.headers['Content-Type'])\nprint(\"Content Length:\", request_info.headers['Content-Length'], \n      'bytes')\n\nRequest status code: 200\nContent Type: application/json\nContent Length: 214545 bytes\n\n\n\n# Convert json data to Python dict format\nrequest_data = request_info.json()\n\n\n\n3.2 Explore the data that was returned\n\n# List the dictionary keys \nprint(\"request_data:\", request_data.keys())\n\nrequest_data: dict_keys(['fields', 'data'])\n\n\n\nrequest_data['fields']\n\n['cik', 'name', 'ticker', 'exchange']\n\n\n\nrequest_data['data'][0:10]\n\n[[320193, 'Apple Inc.', 'AAPL', 'Nasdaq'],\n [789019, 'MICROSOFT CORP', 'MSFT', 'Nasdaq'],\n [1018724, 'AMAZON COM INC', 'AMZN', 'Nasdaq'],\n [1067983, 'BERKSHIRE HATHAWAY INC', 'BRK-B', 'NYSE'],\n [731766, 'UNITEDHEALTH GROUP INC', 'UNH', 'NYSE'],\n [34088, 'EXXON MOBIL CORP', 'XOM', 'NYSE'],\n [200406, 'JOHNSON & JOHNSON', 'JNJ', 'NYSE'],\n [104169, 'Walmart Inc.', 'WMT', 'NYSE'],\n [19617, 'JPMORGAN CHASE & CO', 'JPM', 'NYSE'],\n [93410, 'CHEVRON CORP', 'CVX', 'NYSE']]\n\n\n\n\n3.3 Create a Pandas dataframe from the API content\n\n# Create a new dataframe\ndf_tickers = (\n    pd.DataFrame(data=request_data['data'], \n                 columns=request_data['fields'])\n    .set_index('ticker')\n)\n\n# Display the top few rows\ndf_tickers.head()\n\n\n\n\n\n  \n    \n      \n      cik\n      name\n      exchange\n    \n    \n      ticker\n      \n      \n      \n    \n  \n  \n    \n      AAPL\n      320193\n      Apple Inc.\n      Nasdaq\n    \n    \n      MSFT\n      789019\n      MICROSOFT CORP\n      Nasdaq\n    \n    \n      AMZN\n      1018724\n      AMAZON COM INC\n      Nasdaq\n    \n    \n      BRK-B\n      1067983\n      BERKSHIRE HATHAWAY INC\n      NYSE\n    \n    \n      UNH\n      731766\n      UNITEDHEALTH GROUP INC\n      NYSE\n    \n  \n\n\n\n\n\n# Slice the dataframe to show only the row where ticker=='AAPL'\ndf_tickers.query(f\"ticker=='{ticker}'\")\n\n\n\n\n\n  \n    \n      \n      cik\n      name\n      exchange\n    \n    \n      ticker\n      \n      \n      \n    \n  \n  \n    \n      AAPL\n      320193\n      Apple Inc.\n      Nasdaq\n    \n  \n\n\n\n\n\n\n3.4 Create a function to pull data for a single ticker and format the CIK as a string\nThis is necessary because in the next section we will need to add a formatted CID to the API call.\n\ndef get_cik_string(ticker_data, ticker_symbol):\n    ticker_symbol = ticker_symbol.upper()\n    data_slice = ticker_data.loc[[ticker_symbol],['cik']]\n    cik_value = data_slice.values[0][0]\n    cik_string = 'CIK' + str(cik_value).rjust(10, '0')\n    return cik_string\n\n\n# Example for our ticker\nprint(\"ticker:\", ticker)\nprint(\"CIK:\",    get_cik_string(df_tickers, ticker))\n\nticker: AAPL\nCIK: CIK0000320193"
  },
  {
    "objectID": "posts/stock_ticker_data/stock_ticker_data.html#get-financial-data-from-data.sec.gov-api-for-a-specific-xbrl-line-item-tag",
    "href": "posts/stock_ticker_data/stock_ticker_data.html#get-financial-data-from-data.sec.gov-api-for-a-specific-xbrl-line-item-tag",
    "title": "Get Financial Data by Stock Ticker From data.sec.gov API",
    "section": "4 Get financial data from data.sec.gov api for a specific XBRL line item tag",
    "text": "4 Get financial data from data.sec.gov api for a specific XBRL line item tag\n\n# Build up the request URL\ncik = get_cik_string(df_tickers, ticker)\ntag = 'Assets'\nurl = f\"https://data.sec.gov/api/xbrl/companyconcept/{cik}/us-gaap/{tag}.json\"\n\nprint(\"URL:\", url)\n\n# Run the API request   \nrequest_tag_data = requests.get(url, headers={'User-Agent': email_address})\n\n# Print the status code (200 is good, 404 is bad), and other content info.\nprint(\"Request status code:\", request_tag_data.status_code)\nprint(\"Content Type:\", request_tag_data.headers['Content-Type'])\nprint(\"Content Length:\", request_tag_data.headers['Content-Length'], \n      'bytes')\n\nURL: https://data.sec.gov/api/xbrl/companyconcept/CIK0000320193/us-gaap/Assets.json\n\n\nRequest status code: 200\nContent Type: application/json\nContent Length: 2052 bytes\n\n\n\ntag_data = request_tag_data.json()\n\npprint(tag_data, depth=2)\n\n{'cik': 320193,\n 'description': 'Sum of the carrying amounts as of the balance sheet date of '\n                'all assets that are recognized. Assets are probable future '\n                'economic benefits obtained or controlled by an entity as a '\n                'result of past transactions or events.',\n 'entityName': 'Apple Inc.',\n 'label': 'Assets',\n 'tag': 'Assets',\n 'taxonomy': 'us-gaap',\n 'units': {'USD': [...]}}\n\n\n\ndf_tag_data = pd.DataFrame.from_dict(tag_data['units']['USD'])\n\n\ndf_tag_data\n\n\n\n\n\n  \n    \n      \n      end\n      val\n      accn\n      fy\n      fp\n      form\n      filed\n      frame\n    \n  \n  \n    \n      0\n      2008-09-27\n      39572000000\n      0001193125-09-153165\n      2009\n      Q3\n      10-Q\n      2009-07-22\n      NaN\n    \n    \n      1\n      2008-09-27\n      39572000000\n      0001193125-09-214859\n      2009\n      FY\n      10-K\n      2009-10-27\n      NaN\n    \n    \n      2\n      2008-09-27\n      36171000000\n      0001193125-10-012091\n      2009\n      FY\n      10-K/A\n      2010-01-25\n      NaN\n    \n    \n      3\n      2008-09-27\n      36171000000\n      0001193125-10-238044\n      2010\n      FY\n      10-K\n      2010-10-27\n      CY2008Q3I\n    \n    \n      4\n      2009-06-27\n      48140000000\n      0001193125-09-153165\n      2009\n      Q3\n      10-Q\n      2009-07-22\n      CY2009Q2I\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      111\n      2021-09-25\n      351002000000\n      0000320193-22-000108\n      2022\n      FY\n      10-K\n      2022-10-28\n      CY2021Q3I\n    \n    \n      112\n      2021-12-25\n      381191000000\n      0000320193-22-000007\n      2022\n      Q1\n      10-Q\n      2022-01-28\n      CY2021Q4I\n    \n    \n      113\n      2022-03-26\n      350662000000\n      0000320193-22-000059\n      2022\n      Q2\n      10-Q\n      2022-04-29\n      CY2022Q1I\n    \n    \n      114\n      2022-06-25\n      336309000000\n      0000320193-22-000070\n      2022\n      Q3\n      10-Q\n      2022-07-29\n      CY2022Q2I\n    \n    \n      115\n      2022-09-24\n      352755000000\n      0000320193-22-000108\n      2022\n      FY\n      10-K\n      2022-10-28\n      CY2022Q3I\n    \n  \n\n116 rows × 8 columns"
  },
  {
    "objectID": "posts/stock_ticker_data/stock_ticker_data.html#plot-the-trend-data",
    "href": "posts/stock_ticker_data/stock_ticker_data.html#plot-the-trend-data",
    "title": "Get Financial Data by Stock Ticker From data.sec.gov API",
    "section": "5 Plot the trend data",
    "text": "5 Plot the trend data\n\n5.1 Create a table of plot data\n\n# Filter rows to only those with current year (CY) labels\nstarts_with_cy = lambda x: bool(isinstance(re.search(r'^CY', x), re.Match))\nx_axis_name = 'End Date'\ny_axis_name = f'{tag} (USD in Billions)'\n\ndf_plot_data = (\n    df_tag_data\n    .query(\"form == '10-Q'\")\n    .assign(yr_mon = lambda x: [f\"{y[0]}-{y[1]}\" for y in zip(x.fy, x.fp)] )\n    .assign(filter_flag = lambda x: [starts_with_cy(str(y)) for y in x.frame])\n    .query(\"filter_flag==True\")\n    .filter(['end', 'val'])\n    .assign(val = lambda x: x.val/1000000000)\n    .rename(columns={'end':x_axis_name, 'val':y_axis_name})\n    .sort_values(by=x_axis_name)\n)\n\ndf_plot_data.tail(10)\n\n\n\n\n\n  \n    \n      \n      End Date\n      Assets (USD in Billions)\n    \n  \n  \n    \n      90\n      2019-06-29\n      322.239\n    \n    \n      96\n      2019-12-28\n      340.618\n    \n    \n      97\n      2020-03-28\n      320.400\n    \n    \n      98\n      2020-06-27\n      317.344\n    \n    \n      104\n      2020-12-26\n      354.054\n    \n    \n      105\n      2021-03-27\n      337.158\n    \n    \n      106\n      2021-06-26\n      329.840\n    \n    \n      112\n      2021-12-25\n      381.191\n    \n    \n      113\n      2022-03-26\n      350.662\n    \n    \n      114\n      2022-06-25\n      336.309\n    \n  \n\n\n\n\n\n\n5.2 Draw a line chart\n\ndf_plot_data.plot(kind = 'line', x = x_axis_name, y = y_axis_name, \n                  figsize=(10, 6), title = f\"{ticker} {tag}\")\nplt.show()"
  },
  {
    "objectID": "posts/stock_ticker_data/stock_ticker_data.html#get-financial-data-from-the-data.sec.gov-api-for-a-specific-xbrl-line-item-tag",
    "href": "posts/stock_ticker_data/stock_ticker_data.html#get-financial-data-from-the-data.sec.gov-api-for-a-specific-xbrl-line-item-tag",
    "title": "Get financial reporting data, by stock ticker, from the data.sec.gov API",
    "section": "4 Get financial data from the data.sec.gov api for a specific XBRL line item tag",
    "text": "4 Get financial data from the data.sec.gov api for a specific XBRL line item tag\n\n# Build up the request URL\ncik = get_cik_string(df_tickers, ticker)\ntag = 'Assets'\ndomain = 'https://data.sec.gov'\nurl = f\"{domain}/api/xbrl/companyconcept/{cik}/us-gaap/{tag}.json\"\n\n# Run the API request   \nrequest_tag_data = (requests\n                    .get(url, \n                         headers={'User-Agent': email_address})\n                   )\n\n# Print the status code (200 is good, 404 is bad)\nprint(\"Request status code:\", request_tag_data.status_code)\nprint(\"Content Type:\", request_tag_data.headers['Content-Type'])\nprint(\"Content Length:\", \n      request_tag_data.headers['Content-Length'], 'bytes')\n\nRequest status code: 200\nContent Type: application/json\nContent Length: 2052 bytes\n\n\n\ntag_data = request_tag_data.json()\n\npprint(tag_data, depth=2)\n\n{'cik': 320193,\n 'description': 'Sum of the carrying amounts as of the balance sheet date of '\n                'all assets that are recognized. Assets are probable future '\n                'economic benefits obtained or controlled by an entity as a '\n                'result of past transactions or events.',\n 'entityName': 'Apple Inc.',\n 'label': 'Assets',\n 'tag': 'Assets',\n 'taxonomy': 'us-gaap',\n 'units': {'USD': [...]}}\n\n\n\ndf_tag_data = pd.DataFrame.from_dict(tag_data['units']['USD'])\n\n\ndf_tag_data\n\n\n\n\n\n  \n    \n      \n      end\n      val\n      accn\n      fy\n      fp\n      form\n      filed\n      frame\n    \n  \n  \n    \n      0\n      2008-09-27\n      39572000000\n      0001193125-09-153165\n      2009\n      Q3\n      10-Q\n      2009-07-22\n      NaN\n    \n    \n      1\n      2008-09-27\n      39572000000\n      0001193125-09-214859\n      2009\n      FY\n      10-K\n      2009-10-27\n      NaN\n    \n    \n      2\n      2008-09-27\n      36171000000\n      0001193125-10-012091\n      2009\n      FY\n      10-K/A\n      2010-01-25\n      NaN\n    \n    \n      3\n      2008-09-27\n      36171000000\n      0001193125-10-238044\n      2010\n      FY\n      10-K\n      2010-10-27\n      CY2008Q3I\n    \n    \n      4\n      2009-06-27\n      48140000000\n      0001193125-09-153165\n      2009\n      Q3\n      10-Q\n      2009-07-22\n      CY2009Q2I\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      111\n      2021-09-25\n      351002000000\n      0000320193-22-000108\n      2022\n      FY\n      10-K\n      2022-10-28\n      CY2021Q3I\n    \n    \n      112\n      2021-12-25\n      381191000000\n      0000320193-22-000007\n      2022\n      Q1\n      10-Q\n      2022-01-28\n      CY2021Q4I\n    \n    \n      113\n      2022-03-26\n      350662000000\n      0000320193-22-000059\n      2022\n      Q2\n      10-Q\n      2022-04-29\n      CY2022Q1I\n    \n    \n      114\n      2022-06-25\n      336309000000\n      0000320193-22-000070\n      2022\n      Q3\n      10-Q\n      2022-07-29\n      CY2022Q2I\n    \n    \n      115\n      2022-09-24\n      352755000000\n      0000320193-22-000108\n      2022\n      FY\n      10-K\n      2022-10-28\n      CY2022Q3I\n    \n  \n\n116 rows × 8 columns"
  },
  {
    "objectID": "posts/stock_ticker_data/stock_ticker_data.html#plot-trend-data",
    "href": "posts/stock_ticker_data/stock_ticker_data.html#plot-trend-data",
    "title": "Get financial reporting data, by stock ticker, from the data.sec.gov API",
    "section": "5 Plot trend data",
    "text": "5 Plot trend data\n\n5.1 Create a table of plot data\n\n# Filter rows to only those with current year (CY) labels\nstarts_with_cy = lambda x: bool(isinstance(re.search(r'^CY', x), re.Match))\nx_axis_name = 'End Date'\ny_axis_name = f'{tag} (USD in Billions)'\n\ndf_plot_data = (\n    df_tag_data\n    .query(\"form == '10-Q'\")\n    .assign(yr_mon = lambda x: [f\"{y[0]}-{y[1]}\" for y in zip(x.fy, x.fp)] )\n    .assign(filter_flag = lambda x: [starts_with_cy(str(y)) for y in x.frame])\n    .query(\"filter_flag==True\")\n    .filter(['end', 'val'])\n    .assign(val = lambda x: x.val/1000000000)\n    .rename(columns={'end':x_axis_name, 'val':y_axis_name})\n    .sort_values(by=x_axis_name)\n)\n\ndf_plot_data.tail(10)\n\n\n\n\n\n  \n    \n      \n      End Date\n      Assets (USD in Billions)\n    \n  \n  \n    \n      90\n      2019-06-29\n      322.239\n    \n    \n      96\n      2019-12-28\n      340.618\n    \n    \n      97\n      2020-03-28\n      320.400\n    \n    \n      98\n      2020-06-27\n      317.344\n    \n    \n      104\n      2020-12-26\n      354.054\n    \n    \n      105\n      2021-03-27\n      337.158\n    \n    \n      106\n      2021-06-26\n      329.840\n    \n    \n      112\n      2021-12-25\n      381.191\n    \n    \n      113\n      2022-03-26\n      350.662\n    \n    \n      114\n      2022-06-25\n      336.309\n    \n  \n\n\n\n\n\n\n5.2 Draw a line chart\n\ndf_plot_data.plot(kind = 'line', x = x_axis_name, y = y_axis_name, \n                  figsize=(10, 6), title = f\"{ticker} {tag}\")\nplt.show()"
  }
]