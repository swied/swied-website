[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Scott's Data Science Blog",
    "section": "",
    "text": "Hi,\nThanks for visiting my blog! I decided to start writing these articles to share with others how I do Data Science. I enjoy exploring data to solve real world problems. For this blog, I have created a set of Jupyter notebooks – each telling a story about a specific problem. I try to keep the descriptions light, so the code and the visualizations tell the real story. Each article has a corresponding Jupyter notebook. You can read the articles below, or download my notebooks on GitHub.\nNote that I am currently looking for a new job as a Data Scientist. Please visit my profile on LinkedIn to learn more about me.\nI hope you enjoy swied.com.\nThanks,\nScott"
  },
  {
    "objectID": "index.html#articles",
    "href": "index.html#articles",
    "title": "Scott's Data Science Blog",
    "section": "Articles",
    "text": "Articles"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog About this blogAbout this blogAbout this blogAbout this blogAbout this blogAbout this blogAbout this blogAbout this blogAbout this blogAbout this blogAbout this blogAbout this blogAbout this blogAbout this blogAbout this blogAbout this blogAbout this blogAbout this blogAbout this blogAbout this blogAbout this blog"
  },
  {
    "objectID": "posts/company-financial-trends/company-financial-trends.html",
    "href": "posts/company-financial-trends/company-financial-trends.html",
    "title": "Company Financial Trends",
    "section": "",
    "text": "If you want to do fundamental research on a publicly traded company, then there are a lot of services that will charge you a lot of money for that data. What if you don’t have a lot of money? And, what if you don’t trust any data that doesn’t come directly from its source? In this article I will show you how to use the vast data resources provided by the US government… for free."
  },
  {
    "objectID": "posts/company-financial-trends/company-financial-trends.html#intro-to-xbrl-tagging",
    "href": "posts/company-financial-trends/company-financial-trends.html#intro-to-xbrl-tagging",
    "title": "Company Financial Trends",
    "section": "2 Intro to XBRL tagging",
    "text": "2 Intro to XBRL tagging\nA public company is required, by the SEC, to use XBRL line item tags whenever it files its 10-Q (quarterly) and 10-K (annual) financial reports. There is an sec.gov API that you can use to get data on the performance of a companies fundamental metrics over time. You will need the XBRL tag name for each metric that you wish to track.\nBelow is a quote from an XBRL Wikipedia article that gives a technical desciption of the XBRL standard:\n\nXBRL (eXtensible Business Reporting Language) is a freely available and global framework for exchanging business information. XBRL allows the expression of semantic meaning commonly required in business reporting. The language is XML-based and uses the XML syntax and related XML technologies such as XML Schema, XLink, XPath, and Namespaces. One use of XBRL is to define and exchange financial information, such as a financial statement. The XBRL Specification is developed and published by XBRL International, Inc. (XII).\n\nThe SEC has a page that describes how they use XBRL. It even includes a link to a YouTube video that you can watch sometime if you are having trouble sleeping.\nThe best way to become familiar with XBRL is to go through an example. Let’s do that below.\n\n2.1 Find the CIK for Apple\nAs and example, let’s use Apple (stock ticker: APPL). Every company that files with the SEC receives a central index key (CIK). The API that we will use requires this CIK code.\n\nticker = 'AAPL'\n\nStart by doing a search for a company on EDGAR. Look for the company CIK code (circled in red below) as you type in the ticker symbol. Write this value down, and then click on the search result.\n\n\n# Create a variable from the CIK code in the \n# above image.  Make sure that the CIK is\n# uppercase, and that there is no space in the name.\ncik = 'CIK0000320193'\n\n\n\n2.2 Open a 10-K report\nThe next page (see below) will display the search results for the chosen company. Notice that the numeric part of the CIK code is included in the URL. Now, click on one of the 10-K or 10-Q reports listed under “Selected Filings”\n\nThere are several files shown on the Filing Detail page (see below). We want to view the top one, the one with the green iXBRL note beside it. Click on the link to open the filed report.\n\n\n\n2.3 Find the finacial statements\nThese SEC filing reports can be quite wordy. Scroll down to the table of contents (see below) after opening the document. Find the section titled Financial Statements and click on the bookmark link. This will take you to the page where you will find several financial reports.\n\n\n\n2.4 Identify the Net Income line item\nScroll down a little bit, until you see a table of numbers. These reports are all in a specific format that is mandated by the SEC. Each line item name is a registered and approved XBRL tag. If you want to find the name of the tag, then click on one of the numbers with red lines above and below it.\n\n\n\n2.5 Find the XBRL tag name for Net Income\nA pop-up window will appear (see below) showing the attributes of that line item value. Find the Tag attribute row, and copy the part that says, ‘NetincomeLoss’. This is our XBRL tag name! We now have all of the information that we need to use the API.\n\n\n# Create a variable with the XBRL tag name.\n# Note that it is case sensitive.\nxbrl_tag = 'NetIncomeLoss'"
  },
  {
    "objectID": "posts/company-financial-trends/company-financial-trends.html#api-data-pull",
    "href": "posts/company-financial-trends/company-financial-trends.html#api-data-pull",
    "title": "Company Financial Trends",
    "section": "3 API data pull",
    "text": "3 API data pull\nIn our example, we will attempt to plot the quarterly trend for Apple’s Net Income line item. We will be pulling the data from the data.sec.gov api.\n\n3.1 Import python packages\nThese are the packages that we will need. All of them can be downloaded and installed with Anaconda.\n\nimport requests\nimport json\nfrom pprint import pprint\nimport pandas as pd\nimport numpy as np\nimport re\nimport altair as alt\nimport pandasql\n\n\n\n3.2 Make the API Call\n\n# Build up the API request URL\napi_url_path = 'https://data.sec.gov/api/xbrl/companyconcept'\nurl = f\"{api_url_path}/{cik}/us-gaap/{xbrl_tag}.json\"\n\n# Run the API request\n# Note that it will not run without your email address\nemail_address = 'your-email@example.com'\nrequest_tag_data = (\n    requests\n    .get(url, \n         headers={'User-Agent': email_address}))\n\n# Print the status code (200 is good, 404 is bad)\nprint(\"Request status code:\", request_tag_data.status_code)\nprint(\"Content Type:\", request_tag_data.headers['Content-Type'])\nprint(\"Content Length:\", \n      request_tag_data.headers['Content-Length'], 'bytes')\n\nRequest status code: 200\nContent Type: application/json\nContent Length: 3281 bytes\n\n\n\n\n3.3 Take a look at the raw JSON data\n\ntag_data = request_tag_data.json()\npprint(tag_data, depth=2)\n\n{'cik': 320193,\n 'description': 'The portion of profit or loss for the period, net of income '\n                'taxes, which is attributable to the parent.',\n 'entityName': 'Apple Inc.',\n 'label': 'Net Income (Loss) Attributable to Parent',\n 'tag': 'NetIncomeLoss',\n 'taxonomy': 'us-gaap',\n 'units': {'USD': [...]}}\n\n\n\n\n3.4 Convert to a Pandas Dataframe\n\ndf_tag_data = pd.DataFrame.from_dict(tag_data['units']['USD'])\ndf_tag_data.sort_values(by=['filed','fy','fp']).tail()\n\n\n\n\n\n  \n    \n      \n      start\n      end\n      val\n      accn\n      fy\n      fp\n      form\n      filed\n      frame\n    \n  \n  \n    \n      286\n      2021-09-26\n      2022-06-25\n      79082000000\n      0000320193-22-000070\n      2022\n      Q3\n      10-Q\n      2022-07-29\n      NaN\n    \n    \n      287\n      2022-03-27\n      2022-06-25\n      19442000000\n      0000320193-22-000070\n      2022\n      Q3\n      10-Q\n      2022-07-29\n      CY2022Q2\n    \n    \n      269\n      2019-09-29\n      2020-09-26\n      57411000000\n      0000320193-22-000108\n      2022\n      FY\n      10-K\n      2022-10-28\n      CY2020\n    \n    \n      282\n      2020-09-27\n      2021-09-25\n      94680000000\n      0000320193-22-000108\n      2022\n      FY\n      10-K\n      2022-10-28\n      CY2021\n    \n    \n      288\n      2021-09-26\n      2022-09-24\n      99803000000\n      0000320193-22-000108\n      2022\n      FY\n      10-K\n      2022-10-28\n      CY2022\n    \n  \n\n\n\n\nNote a few things about the above table:\n\nThere are multiple records for each quarter. This is because the financial report shows values for the current quarter, the previous quarter, and the current quarter from the previous fiscal year. It would be great if the API provided a field describing which time period was which. When we go to plot the graph we will only want to include the current quarters value for each quarter.\nThe values for Q1, Q2, and Q3 come from the form 10-Q. There is no 10-Q for Q4, and the 10-K report only shows yearly totals. In order to find the values for Q4 of each year we’ll need to take the annual total and subtract the totals from Q1, Q2, and Q3."
  },
  {
    "objectID": "posts/company-financial-trends/company-financial-trends.html#clean-and-filter-data",
    "href": "posts/company-financial-trends/company-financial-trends.html#clean-and-filter-data",
    "title": "Company Financial Trends",
    "section": "4 Clean and filter data",
    "text": "4 Clean and filter data\nSince the data set does not have a column indicating which quarter each value is associated with, we will have to use a brute force approach. We’ll have to use a window function to pick a single record for each fiscal year/quarter. The syntax for doing window operations in Pandas is a little weird, IMO. I think that it’s easier to do this in SQL, so lets use the sqldf function from the pandasql package. Note that sqldf kind of slow on large dataframes.\n\n4.1 Rank records over fiscal year and period\nIn our first SQL query (see below), we are going to rank records over partitions defined by fiscal year and fiscal period. We’ll calculate the number of days in between the dates start and end. And, finally, we’ll create a new val_10q column to indicate the values that came from 10-Q reports. We’ll need it later when we subtract the sum of the values for Q1-3 from the annual amount to calculate the Q4 value.\n\ndf_rank = pandasql.sqldf(\"\"\"\n    select fy, fp, end, start,\n        (   julianday(date(end))\n           -julianday(date(start))\n        ) as num_days_in_period,\n        val, form,\n        (   case \n            when form='10-Q'\n            then val\n            else 0\n            end\n        ) as val_10q,\n        rank()\n        over(\n            partition by fy, fp\n            order by \n                end desc, \n                start desc\n        ) as rnk\n    from df_tag_data\n    where form in('10-Q','10-K')\n\"\"\")\n\ndf_rank.tail()\n\n\n\n\n\n  \n    \n      \n      fy\n      fp\n      end\n      start\n      num_days_in_period\n      val\n      form\n      val_10q\n      rnk\n    \n  \n  \n    \n      259\n      2022\n      Q2\n      2021-03-27\n      2020-09-27\n      181.0\n      52385000000\n      10-Q\n      52385000000\n      4\n    \n    \n      260\n      2022\n      Q3\n      2022-06-25\n      2022-03-27\n      90.0\n      19442000000\n      10-Q\n      19442000000\n      1\n    \n    \n      261\n      2022\n      Q3\n      2022-06-25\n      2021-09-26\n      272.0\n      79082000000\n      10-Q\n      79082000000\n      2\n    \n    \n      262\n      2022\n      Q3\n      2021-06-26\n      2021-03-28\n      90.0\n      21744000000\n      10-Q\n      21744000000\n      3\n    \n    \n      263\n      2022\n      Q3\n      2021-06-26\n      2020-09-27\n      272.0\n      74129000000\n      10-Q\n      74129000000\n      4\n    \n  \n\n\n\n\n\n\n4.2 Filter the dataframe for rank=1 records\n\ndf_filtered = pandasql.sqldf(\"\"\"\n    select \n        fy, fp, \n        end, start,\n        num_days_in_period,\n        val, form,\n        sum(val_10q) \n        over(partition by fy\n            ) as total_val_10q\n    from df_rank\n    where rnk=1\n\"\"\")\n\ndf_filtered.head()\n\n\n\n\n\n  \n    \n      \n      fy\n      fp\n      end\n      start\n      num_days_in_period\n      val\n      form\n      total_val_10q\n    \n  \n  \n    \n      0\n      2009\n      FY\n      2009-09-26\n      2008-09-28\n      363.0\n      5704000000\n      10-K\n      1229000000\n    \n    \n      1\n      2009\n      Q3\n      2009-06-27\n      2009-03-29\n      90.0\n      1229000000\n      10-Q\n      1229000000\n    \n    \n      2\n      2010\n      FY\n      2010-09-25\n      2010-06-27\n      90.0\n      4308000000\n      10-K\n      9705000000\n    \n    \n      3\n      2010\n      Q1\n      2009-12-26\n      2009-09-27\n      90.0\n      3378000000\n      10-Q\n      9705000000\n    \n    \n      4\n      2010\n      Q2\n      2010-03-27\n      2009-12-27\n      90.0\n      3074000000\n      10-Q\n      9705000000\n    \n  \n\n\n\n\n\n\n4.3 Finalize data for plotting\n\nx_axis_name = 'End Date'\ny_axis_name = f'{xbrl_tag} (USD in Billions)'\n\ndf_plot_data = pandasql.sqldf(f\"\"\"\nselect\n    fy as `Fiscal Year`, \n    (   case \n        when fp='FY' then 'Q4'\n        else fp\n        end\n    ) as `Fiscal Quarter`,\n    end as `{x_axis_name}`,\n    round(   \n        case when form='10-K' \n            and num_days_in_period > 360\n        then (val - total_val_10q)/1e9\n        else val/1e9\n        end, \n        2\n    ) as `{y_axis_name}`\nfrom df_filtered\norder by `{x_axis_name}`\n\"\"\")\n\ndf_plot_data.tail()\n\n\n\n\n\n  \n    \n      \n      Fiscal Year\n      Fiscal Quarter\n      End Date\n      NetIncomeLoss (USD in Billions)\n    \n  \n  \n    \n      49\n      2021\n      Q4\n      2021-09-25\n      20.55\n    \n    \n      50\n      2022\n      Q1\n      2021-12-25\n      34.63\n    \n    \n      51\n      2022\n      Q2\n      2022-03-26\n      25.01\n    \n    \n      52\n      2022\n      Q3\n      2022-06-25\n      19.44\n    \n    \n      53\n      2022\n      Q4\n      2022-09-24\n      20.72"
  },
  {
    "objectID": "posts/company-financial-trends/company-financial-trends.html#show-trend-as-a-bart-chart",
    "href": "posts/company-financial-trends/company-financial-trends.html#show-trend-as-a-bart-chart",
    "title": "Company Financial Trends",
    "section": "5 Show trend as a bart chart",
    "text": "5 Show trend as a bart chart\n\nalt.Chart(df_plot_data).mark_bar().encode(\n    x = alt.X(x_axis_name, \n              axis = alt.Axis(labelOverlap='greedy')),\n    y = y_axis_name,\n).properties(\n    title = f\"{ticker} - {y_axis_name}\",\n    width = 300,\n    height = 200\n)"
  },
  {
    "objectID": "posts/make-a-ringtone-sound/make-a-ringtone-sound.html",
    "href": "posts/make-a-ringtone-sound/make-a-ringtone-sound.html",
    "title": "Play the audio for the old US ringtone",
    "section": "",
    "text": "The Bell telphone ringtone was a two second tone composed of the frequencies 440 Hz and 480 Hz. The tone was followed by a four second pause, and then repeated. This ringtone continues to be used in the US with most mobile/landline carriers, and PBX systems. Read more about this, and other international ringtones, at https://en.wikipedia.org/wiki/Ringing_tone.\nYou can download a recording of the US ringtone, which is now in the public domain. Shown below is a demonstration of how to play this sound file within a Jupyter notebook.\n\nfrom IPython.display import display, HTML, Audio\nHTML(\"\"\"<p>Ringtone Recording:</p>\n        <audio controls>\n        <source type=\"audio/mp3\"\n          src=\"resources/US_ringback_tone.mp3\">\n        <source type=\"audio/ogg\"\n          src=\"resources/US_ringback_tone.ogg\">\n        <p>Your browser cannot play this audio</p>\n        </audio>\"\"\")\n\nRingtone Recording:\n        \n        \n        \n        Your browser cannot play this audio"
  },
  {
    "objectID": "posts/make-a-ringtone-sound/make-a-ringtone-sound.html#basics-of-audio-frequencies",
    "href": "posts/make-a-ringtone-sound/make-a-ringtone-sound.html#basics-of-audio-frequencies",
    "title": "Play the audio for the old US ringtone",
    "section": "2 Basics of audio frequencies",
    "text": "2 Basics of audio frequencies\nLet’s start with some basics before jumping into recreating this ringtone.\nThe sounds that we hear are produced by longitudinal pressure waves in air particles. These waves cause your ear drum to vibrate. A pure tone is produced when you hear an unchanging frequency with a sinusoidal waveform.\nThe basic equation of a sinusoidal waveform:\n\\(y(t) =  sin  \\left({  2 \\pi f t  }\\right)\\)\nWhere, \\(t\\) is the time value, and \\(f\\) = wave frequency (Hertz).\n\n2.1 Symbolic equations in Python\nIf you are exploring a problem it can be helpful to start with symbolic computation. The Sympy package in Python allows you to operate on and simplify algebraic equations. Then, when you are ready, you can easily convert your equations into numerical formats (e.q., a Python list, or a Numpy array).\nDefine sinusoidal waveform equation as a symbolic equation.\n\nimport sympy as s\n\n# Define variables as Sympy symbols\nt, f = s.symbols('t f')\n\n# Define Sympy equation\ny = s.sin(2*s.pi*t*f)\n\nprint(f\"y = {y}\")\n\ny = sin(2*pi*f*t)\n\n\n\n\n2.2 Musical notes\nAs a first example let’s explore a couple of pure tones: 440 Hz (A4), and 480 Hz (B4).\n\n# Substitue these frequencies in for f\ny_at_440_hz = y.subs(f, 440)\ny_at_480_hz = y.subs(f, 480)\n\n\n# Show the new equations\nprint(f\"y_at_440_hz = {y_at_440_hz}\")\nprint(f\"y_at_480_hz = {y_at_480_hz}\")\n\ny_at_440_hz = sin(880*pi*t)\ny_at_480_hz = sin(960*pi*t)\n\n\n\n\n2.3 Plot the notes A4 and B4 on a graph\nLet’s plot these example frequencies together on a graph. Note that we don’t have to transform our equations into numerical lists before plotting them. Sympy does this for us. We just need to provide a plot range.\n\nplot_range = (t, 0, 1/440)\n\n# Plot the curve for A4\np = s.plot(\n    y_at_440_hz, plot_range, \n    line_color='gray',\n    title=f'Frequencies 440Hz, and 480Hz',\n    show=False)\n\n# Add the curve for B4 to the graph\np.extend(s.plot(\n    y_at_480_hz, plot_range, \n    line_color='green',\n    show=False, adaptive=False))\n\n# Format the graph and display it\np.size = (6,5)\np.show()\n\n\n\n\n\n\n2.4 Convert Sympy equations into Python lists\nIn order to listen to these two notes we need to convert the equations into numerical time series.\n\n# Convert our Sympy equations into \n# Python lambda functions\nlambda_y_440 = s.lambdify(t, y_at_440_hz)\nlambda_y_480 = s.lambdify(t, y_at_480_hz)\n\n\n# Define numeric values for f1, and f2\nf_440, f_480 = (440, 480)\n# Number of samples per cycle\nn = 50\n# Number of seconds of play time\nplay_time = 3\n# Sampling period in micro-seconds\nt_440_delta = int(1e6/n/f_440)\nt_480_delta = int(1e6/n/f_480) \n# Total play time in micro-seconds\nt_max = int(play_time*1e6)\n\n\n# Iterators for each time series\nts_440_range = range(0, t_max, t_440_delta)\nts_480_range = range(0, t_max, t_480_delta)\n\n# Generate numeric lists from lambda\n# functions.  Note: time (t) values have \n# to be converted back into seconds.\nts_440 = [lambda_y_440(t/1e6) \n          for t \n          in ts_440_range]\nts_480 = [lambda_y_480(t/1e6) \n           for t \n           in ts_480_range]\n\n\n\n2.5 Play sounds for A4 and B4\n\nAudio(ts_440, rate=f_440*n)\n\n\n                \n                    \n                    Your browser does not support the audio element.\n                \n              \n\n\n\nAudio(ts_480, rate=f_480*n)\n\n\n                \n                    \n                    Your browser does not support the audio element."
  },
  {
    "objectID": "posts/make-a-ringtone-sound/make-a-ringtone-sound.html#recreate-the-us-ringtone",
    "href": "posts/make-a-ringtone-sound/make-a-ringtone-sound.html#recreate-the-us-ringtone",
    "title": "Play the audio for the old US ringtone",
    "section": "3 Recreate the US ringtone",
    "text": "3 Recreate the US ringtone\nIn the United States, the ringtone has historically been a two second tone composed of the frequencies 440 Hz and 480 Hz. The tone is followed by a four second pause, and then repeated until the call is answered.\n\n3.1 Acustic Equations\nWhen multiple sound waves overlap, their amplitudes add together. This is called superposition.\n\\(y_{super}(t) =  sin  \\left({  2 \\pi f_1 t  }\\right)  +  sin  \\left({  2 \\pi f_2 t  }\\right)\\)\nWhere, the beat frequency (\\(f_{beat}\\)) is defined as\n\\(f_{beat} = \\lvert f_1 - f_2 \\rvert\\),\nand the beat waveform equation (\\(y_{beat}\\)) is defined as\n\\(y_{beat}(t) =  2 \\cdot  cos  \\left({  2 \\pi f_{beat} t  }\\right)\\)\n\n# Define variables as Sympy symbols\nt, f = s.symbols('t f')\n\n# Define Sympy equations\ny = s.sin(2*s.pi*t*f)\ny_beat = 2*s.cos(s.pi*t*f)\n\n\n# Define the two numeric frequencies\nf1 = 440\nf2 = 480\n# Calculate beat frequency\nf_beat = abs(f1-f2)\n\n# Substitute in the numeric values\ny_super = y.subs(f, f1) + y.subs(f, f2)\ny_beat = y_beat.subs(f, f_beat)\n\n\n# Display the simplified equations\nprint(f\"y_super = {y_super}\")\nprint(f\"y_beat = {y_beat}\")\n\ny_super = sin(880*pi*t) + sin(960*pi*t)\ny_beat = 2*cos(40*pi*t)\n\n\n\n\n3.2 Plot the superpositioned waveforms on a graph\nPlot the superpositioned frequencies along with the curve for the beat frequency.\n\nplot_range = (t, 0, 2/f_beat)\n\n# Plot the superpositioned waveform in gray\np = s.plot(\n    y_super, plot_range, line_color='gray',\n    title=f'Superposition {f1}Hz, and {f2}Hz',\n    show=False, adaptive=False)\n\n# Plot, on the same graph, the beat frequency \n# function in green.\np.extend(\n    s.plot(y_beat, plot_range, \n           line_color='green', \n           show=False, adaptive=False))\np.size = (6,5)\np.show()\n\n\n\n\n\n\n3.3 Convert Sympy equations to numeric lists\n\n# Convert our Sympy equation into a\n# Python lambda function\nlambda_y_ringtone = s.lambdify(t, y_super)\n\n\n# Number of samples per cycle\nn = 50\n# Number of seconds of play time\nplay_time = 2\n# Sampling period in micro-seconds\nt_delta = int(1e6/n/max(f1,f2))\n# Total play time in micro-seconds\nt_max = int(play_time*1e6)\n\n\n# Create the time series as a list\nts_ringtone = [\n   lambda_y_ringtone(t/1e6) \n   for t \n   in range(0,t_max, t_delta)]\n\npause_4sec = [\n    0.0\n    for t \n    in range(0,2*t_max,t_delta)]\n\n\n\n3.4 Play the ringtone sound\n\naudio_sampling_rate = max(f1,f2)*n\n\nprint('audio_sampling_rate =', \n      audio_sampling_rate, 'Hz')\n\naudio_sampling_rate = 24000 Hz\n\n\n\nAudio(ts_ringtone + pause_4sec + ts_ringtone, \n      rate=audio_sampling_rate)\n\n\n                \n                    \n                    Your browser does not support the audio element."
  }
]