---
title: Get Financial Data by Stock Ticker From the data.sec.gov API
description: 'A notebook, with code, showing how to pull data from sec.gov web APIâ€™s'
author: Scott Wied
date: 11/06/2022
categories:
  - Pandas
  - API's
  - Matplotlib
  - Finance
  - Python
image: image.png
format:
  html:
    code-fold: false
number-sections: true
toc: true
toc-location: left
code-line-numbers: true
execute:
  warning: false
jupyter: python3
---

:::: {.column-page-right}

## Import python packages

```{python}
import urllib
import requests
import json
from pprint import pprint
import pandas as pd
import numpy as np
from collections import namedtuple
import re
import matplotlib.pyplot as plt
```

## Parameters

```{python}
ticker = 'AAPL'
email_address = 'your-email@example.com'  # Enter your email address here.  It needs to be included in the URL of the API call.
```

## Find the CIK number for the chosen stock ticker

### Request ticker exchange data from the sec.gov API

```{python}
# Run the API request   
request_info = requests.get('https://www.sec.gov/files/company_tickers_exchange.json')

# Print the returned status code (200 is good, 404 is bad) and other content info.
print("Request status code:", request_info.status_code)
print("Content Type:", request_info.headers['Content-Type'])
print("Content Length:", request_info.headers['Content-Length'], 'bytes')
```

```{python}
# Put the requested content into a Python dict object using the `.json()` method
request_data = request_info.json()
```

### Explore the data that was returned

```{python}
# We know that request_data is a dictionary, so let's list all of its keys. 
print("request_data:", request_data.keys())
```

```{python}
request_data['fields']
```

```{python}
request_data['data'][0:10]
```

### Create a Pandas dataframe from the API content

```{python}
# Create a new dataframe
df_tickers = (
    pd.DataFrame(data=request_data['data'], 
                 columns=request_data['fields'])
    .set_index('ticker')
)

# Display the top few rows
df_tickers.head()
```

```{python}
# Slice the dataframe to show only the row where ticker=='AAPL'
df_tickers.query(f"ticker=='{ticker}'")
```

### Create a function to pull data for a single ticker and format the CIK as a string

This is necessary because in the next section we will need to add a formatted CID to the API call.

```{python}
def get_cik_string(ticker_data, ticker_symbol):
    ticker_symbol = ticker_symbol.upper()
    data_slice = ticker_data.loc[[ticker_symbol],['cik']]
    cik_value = data_slice.values[0][0]
    cik_string = 'CIK' + str(cik_value).rjust(10, '0')
    return cik_string
```

```{python}
# Example for our ticker
print("ticker:", ticker)
print("CIK:",    get_cik_string(df_tickers, ticker))
```

## Get financial data from data.sec.gov api for a specific XBRL line item tag

```{python}
# Build up the request URL
cik = get_cik_string(df_tickers, ticker)
tag = 'Assets'
url = f"https://data.sec.gov/api/xbrl/companyconcept/{cik}/us-gaap/{tag}.json"

print("URL:", url)

# Run the API request   
request_tag_data = requests.get(url, headers={'User-Agent': email_address})

# Print the returned status code (200 is good, 404 is bad), and other content info.
print("Request status code:", request_tag_data.status_code)
print("Content Type:", request_tag_data.headers['Content-Type'])
print("Content Length:", request_tag_data.headers['Content-Length'], 'bytes')
```

```{python}
tag_data = request_tag_data.json()
```

```{python}
pprint(tag_data, depth=2)
```

```{python}
df_tag_data = pd.DataFrame.from_dict(tag_data['units']['USD'])
```

```{python}
df_tag_data
```

```{python}
# Filter rows to only those with current year (CY) labels
starts_with_cy = lambda x: bool(isinstance(re.search(r'^CY', x), re.Match))
x_axis_name = 'End Date'
y_axis_name = f'{tag} (USD in Billions)'

df_plot_data = (
    df_tag_data
    .query("form=='10-Q'")
    .assign(yr_mon      = lambda x: [f"{y[0]}-{y[1]}" for y in zip(x.fy, x.fp)] )
    .assign(filter_flag = lambda x: [starts_with_cy(str(y)) for y in x.frame])
    .query("filter_flag==True")
    .filter(['end', 'val'])
    .assign(val = lambda x: x.val/1000000000)
    .rename(columns={'end':x_axis_name, 'val':y_axis_name})
    .sort_values(by=x_axis_name)
)

df_plot_data.tail(10)
```

```{python}
df_plot_data.plot(kind = 'bar', x = x_axis_name, y = y_axis_name, figsize=(12, 5), title = f"{ticker} {tag}")
plt.show()
```

::::

