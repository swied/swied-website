{
  "hash": "850a601b8b745b9eae2ff17cf05b62ce",
  "result": {
    "markdown": "---\ntitle: Post Title\ndate: 11/6/2022\ncategories:\n  - PySpark\n  - Pandas\nformat:\n  html:\n    code-fold: false\nnumber-sections: true\ntoc: true\ntoc-location: left\ncode-line-numbers: true\nexecute:\n  warning: false\n---\n\n:::: {.column-page-right}\n\nIntro.....\n\n## Install PySpark\n\nBefore we start this discussion I think it's important to show how easy it is to install Pyspark.  I recommend using Anaconda to do the PySpark installation.  It only involves a few simple steps -- assuming you already have Anaconda working.  I won't go into that here. I noticed that Pandas was one of the dependencies for the PySpark installation, so we kill two birds with one stone.\n\nOpen a Terminal and execute the following commands one at a time.\n\n::: {.panel-tabset}\n### Terminal\n\n```{bash}\n# Step 1: Activate your existing conda env\nconda activate pyspark_env\n\n# Step 2: Install Open JDK\nconda install openjdk\n\n# Step 3: Install Pyspark\nconda install pyspark\n\n# Step 4: Install findspark in order to run Pyspark in a Jupyter notebook\nconda install -c conda-forge findspark\n```\n\n:::\n\n## Import Python packages\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport pyspark.sql.types as T\nimport pyspark.sql.functions as F\nimport pyspark.sql.window as W\nfrom pyspark.sql import SparkSession\n```\n:::\n\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\n# Create a new spark session\nspark = SparkSession.builder.getOrCreate()\n# spark = SparkSession.builder.appName(\"intro\").getOrCreate()\n```\n:::\n\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\n# Check to see if our spark session is working\nspark.sql(\"select 'hello world' as greeting\").show()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n+-----------+\n|   greeting|\n+-----------+\n|hello world|\n+-----------+\n\n```\n:::\n:::\n\n\n## Create some data frames in both Pandas and Pyspark\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\n# Field values\nplayer_ids  = [1,2,3,4,5,6,7,8,9,10]\nfirst_names = ['juan','Manny','Yu','He-Seong','JURICKSON','jake','Brandon','JOSH','Trent','Austin']\nlast_names  = ['soto', 'Machado', 'Darvish', 'Kim','PROFAR','cronenworth','Drury','BELL','Grisham','Nola']\npositions   = ['RF','3B','P','SS','LF','2B','1B','DH','CF','C']\nbatting     = ['L','R',None,'R','S','L','R','S','L','R']\nat_bats     = [524,578,None,517,575,587,518,552,451,347]\nobp         = [0.401,0.366,None,0.325,0.331,0.332,0.320,0.362,0.284,0.321]\nteams       = ['Padres' for x in range(10)]\n```\n:::\n\n\n### Create a New Dataframe\n\n::: {.panel-tabset}\n\n### Pandas\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\n# Create a new Pandas dataframe from the field lists from above\ndf = pd.DataFrame({'player_id':player_ids,\n                   'team':teams,\n                   'first_name':first_names,\n                   'last_name':last_names,\n                   'position':positions,\n                   'batting_stance':batting,\n                   'at_bats':at_bats,\n                   'obp':obp})\n```\n:::\n\n\n\n\n### Pyspark\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\n# If you are going to create a PySpark dataframe from inline code, then \n# it is actually easiest to just create the dataframe in Pandas, and \n# then convert it to Pyspark.  \ndf = spark.createDataFrame(\n    pd.DataFrame({'player_id':player_ids,\n                   'team':teams,\n                   'first_name':first_names,\n                   'last_name':last_names,\n                   'position':positions,\n                   'batting_stance':batting,\n                   'at_bats':at_bats,\n                   'obp':obp}))\n```\n:::\n\n\n\n\n:::\n\n\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\ndf.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=54}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>player_id</th>\n      <th>team</th>\n      <th>first_name</th>\n      <th>last_name</th>\n      <th>position</th>\n      <th>batting_stance</th>\n      <th>at_bats</th>\n      <th>obp</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>Padres</td>\n      <td>juan</td>\n      <td>soto</td>\n      <td>RF</td>\n      <td>L</td>\n      <td>524.0</td>\n      <td>0.401</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>Padres</td>\n      <td>Manny</td>\n      <td>Machado</td>\n      <td>3B</td>\n      <td>R</td>\n      <td>578.0</td>\n      <td>0.366</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>Padres</td>\n      <td>Yu</td>\n      <td>Darvish</td>\n      <td>P</td>\n      <td>None</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>Padres</td>\n      <td>He-Seong</td>\n      <td>Kim</td>\n      <td>SS</td>\n      <td>R</td>\n      <td>517.0</td>\n      <td>0.325</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>Padres</td>\n      <td>JURICKSON</td>\n      <td>PROFAR</td>\n      <td>LF</td>\n      <td>S</td>\n      <td>575.0</td>\n      <td>0.331</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Task: Multiple String Operations\n\n**Task Description:** (1) Notice that the capitalization is not consistent on the first and last names of the players.  Fix this so that each name has only the first letter capitolized.  (2) Create a new column showing the initials of each player.\n\n#### Pandas Solution\n\nI think it makes it more readable to chain together Pandas function calls by putting them inside of a set of parantheses.  The `assign` function is useful for doing this sort of chaining. \n\n\n\n::: {.panel-tabset}\n\n### Pandas\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\ndf_task_1 = (\n    df\n    # (1) Capitalize the first letter of both the first and last names\n    .assign(first_name = lambda x: x.first_name.str.title())\n    .assign(last_name  = lambda x: x.last_name.str.title())\n    # (2) Creat a new field showing the initals of each player\n    .assign(initials    = lambda x: x.first_name.str[0:1] + '.' + x.last_name.str[0:1] + '.')\n)\n```\n:::\n\n\n\n\n### Pyspark\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\ndf_task_1 = (\n    df\n    # (1) Capitalize the first letter of both the first and last names\n    .withColumn('first_name', F.initcap(F.col('first_name')))\n    .withColumn('last_name',  F.initcap(F.col('last_name')))\n    # (2) Creat a new field showing the initals of each player\n    .withColumn('initials', F.concat(F.substring('first_name',0,1), F.lit('.'), F.substring('last_name', 0, 1), F.lit('.')))\n)\n```\n:::\n\n\n:::\n\n\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\ndf_task_1.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=60}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>player_id</th>\n      <th>team</th>\n      <th>first_name</th>\n      <th>last_name</th>\n      <th>position</th>\n      <th>batting_stance</th>\n      <th>at_bats</th>\n      <th>obp</th>\n      <th>initials</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>Padres</td>\n      <td>Juan</td>\n      <td>Soto</td>\n      <td>RF</td>\n      <td>L</td>\n      <td>524.0</td>\n      <td>0.401</td>\n      <td>J.S.</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>Padres</td>\n      <td>Manny</td>\n      <td>Machado</td>\n      <td>3B</td>\n      <td>R</td>\n      <td>578.0</td>\n      <td>0.366</td>\n      <td>M.M.</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>Padres</td>\n      <td>Yu</td>\n      <td>Darvish</td>\n      <td>P</td>\n      <td>None</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Y.D.</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>Padres</td>\n      <td>He-Seong</td>\n      <td>Kim</td>\n      <td>SS</td>\n      <td>R</td>\n      <td>517.0</td>\n      <td>0.325</td>\n      <td>H.K.</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>Padres</td>\n      <td>Jurickson</td>\n      <td>Profar</td>\n      <td>LF</td>\n      <td>S</td>\n      <td>575.0</td>\n      <td>0.331</td>\n      <td>J.P.</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n:::: {.columns}\n::: {.column width=\"50%\"}\n### Pyspark\n\n\n### Pandas Solution\n\n#### Pandas solution 1 - Using the `apply` function\n\nThis is the most common way I that I have seen people solving this task after searching the internet.  You need to look at it for a bit to understand what is going on.  I'm not a big fan of the apply function.  I think that list comprehensions are a more pythonic way of doing the same task.\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\ndf_pandas['full_name'] = df_pandas[[\"first_name\", \"last_name\"]].apply(\" \".join, axis=1)\ndf_pandas.head(3)\n```\n\n::: {.cell-output .cell-output-display execution_count=61}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>player_id</th>\n      <th>team</th>\n      <th>first_name</th>\n      <th>last_name</th>\n      <th>position</th>\n      <th>batting_stance</th>\n      <th>at_bats</th>\n      <th>obp</th>\n      <th>full_name</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>Padres</td>\n      <td>juan</td>\n      <td>soto</td>\n      <td>RF</td>\n      <td>L</td>\n      <td>524.0</td>\n      <td>0.401</td>\n      <td>juan soto</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>Padres</td>\n      <td>Manny</td>\n      <td>Machado</td>\n      <td>3B</td>\n      <td>R</td>\n      <td>578.0</td>\n      <td>0.366</td>\n      <td>Manny Machado</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>Padres</td>\n      <td>Yu</td>\n      <td>Darvish</td>\n      <td>P</td>\n      <td>None</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Yu Darvish</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n#### Pandas solution 2 - Using a list comprehension and an f-string\n\nHere is a solution that uses the same technique as above, but with a list comprehension instead of an apply function. It may be a bit more \"pythonic\", but it is still not pretty.\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\ndf_pandas['full_name'] = [f\"{x[0]} {x[1]}\" for x in zip(df_pandas[\"first_name\"], df_pandas[\"last_name\"])]\ndf_pandas.head(3)\n```\n\n::: {.cell-output .cell-output-display execution_count=62}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>player_id</th>\n      <th>team</th>\n      <th>first_name</th>\n      <th>last_name</th>\n      <th>position</th>\n      <th>batting_stance</th>\n      <th>at_bats</th>\n      <th>obp</th>\n      <th>full_name</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>Padres</td>\n      <td>juan</td>\n      <td>soto</td>\n      <td>RF</td>\n      <td>L</td>\n      <td>524.0</td>\n      <td>0.401</td>\n      <td>juan soto</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>Padres</td>\n      <td>Manny</td>\n      <td>Machado</td>\n      <td>3B</td>\n      <td>R</td>\n      <td>578.0</td>\n      <td>0.366</td>\n      <td>Manny Machado</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>Padres</td>\n      <td>Yu</td>\n      <td>Darvish</td>\n      <td>P</td>\n      <td>None</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Yu Darvish</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n#### Pandas solution 3 - Using the `assign` function\n\nThis is my favorite Pandas solution.  I like being able to change dataframe operations in series. I can use the `assign` function to accomplish this task.  Unfortunately, like the previous 2 solutions, it is also bit ugly. It involves using a lambda function, a list comprehension, and the zip iterator function.  It's kind of crazy, but it all fits onto a single line.  Once you memorize the pattern you can do this sort of assignment operation one line after another.\n\n::: {.cell execution_count=19}\n``` {.python .cell-code}\n(\n    df_pandas\n    .assign(full_name = lambda x: [f\"{y[0]} {y[1]}\" for y in zip(x.first_name, x.last_name)])\n    .head(3)\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=63}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>player_id</th>\n      <th>team</th>\n      <th>first_name</th>\n      <th>last_name</th>\n      <th>position</th>\n      <th>batting_stance</th>\n      <th>at_bats</th>\n      <th>obp</th>\n      <th>full_name</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>Padres</td>\n      <td>juan</td>\n      <td>soto</td>\n      <td>RF</td>\n      <td>L</td>\n      <td>524.0</td>\n      <td>0.401</td>\n      <td>juan soto</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>Padres</td>\n      <td>Manny</td>\n      <td>Machado</td>\n      <td>3B</td>\n      <td>R</td>\n      <td>578.0</td>\n      <td>0.366</td>\n      <td>Manny Machado</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>Padres</td>\n      <td>Yu</td>\n      <td>Darvish</td>\n      <td>P</td>\n      <td>None</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Yu Darvish</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n#### Pyspark solution\n\nI have saved the best solution for last.  As you saw above, there is no straight forward way to accomplish this task using Pandas.  This Pyspark solution is just as wordy.  However, in my opinion, it way more straight forward.  It is just a few funtion calls.\n\n::: {.cell execution_count=20}\n``` {.python .cell-code}\n(\n    df_pyspark\n    .withColumn('full_name', F.concat(F.col('first_name'), F.lit(' '), F.col('last_name')))\n    .toPandas()\n    .head(3)\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=64}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>player_id</th>\n      <th>team</th>\n      <th>first_name</th>\n      <th>last_name</th>\n      <th>position</th>\n      <th>batting_stance</th>\n      <th>at_bats</th>\n      <th>obp</th>\n      <th>full_name</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>Padres</td>\n      <td>juan</td>\n      <td>soto</td>\n      <td>RF</td>\n      <td>L</td>\n      <td>524.0</td>\n      <td>0.401</td>\n      <td>juan soto</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>Padres</td>\n      <td>Manny</td>\n      <td>Machado</td>\n      <td>3B</td>\n      <td>R</td>\n      <td>578.0</td>\n      <td>0.366</td>\n      <td>Manny Machado</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>Padres</td>\n      <td>Yu</td>\n      <td>Darvish</td>\n      <td>P</td>\n      <td>None</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Yu Darvish</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### Task 2: Apply a window function\n\n#### Pandas solution\n\n::: {.cell execution_count=21}\n``` {.python .cell-code}\n(\n    df_pandas\n    .head()\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=65}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>player_id</th>\n      <th>team</th>\n      <th>first_name</th>\n      <th>last_name</th>\n      <th>position</th>\n      <th>batting_stance</th>\n      <th>at_bats</th>\n      <th>obp</th>\n      <th>full_name</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>Padres</td>\n      <td>juan</td>\n      <td>soto</td>\n      <td>RF</td>\n      <td>L</td>\n      <td>524.0</td>\n      <td>0.401</td>\n      <td>juan soto</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>Padres</td>\n      <td>Manny</td>\n      <td>Machado</td>\n      <td>3B</td>\n      <td>R</td>\n      <td>578.0</td>\n      <td>0.366</td>\n      <td>Manny Machado</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>Padres</td>\n      <td>Yu</td>\n      <td>Darvish</td>\n      <td>P</td>\n      <td>None</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Yu Darvish</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>Padres</td>\n      <td>He-Seong</td>\n      <td>Kim</td>\n      <td>SS</td>\n      <td>R</td>\n      <td>517.0</td>\n      <td>0.325</td>\n      <td>He-Seong Kim</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>Padres</td>\n      <td>JURICKSON</td>\n      <td>PROFAR</td>\n      <td>LF</td>\n      <td>S</td>\n      <td>575.0</td>\n      <td>0.331</td>\n      <td>JURICKSON PROFAR</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n#### PySpark solution\n\n::: {.cell execution_count=22}\n``` {.python .cell-code}\n(\n    df_pyspark\n    .filter(F.col('position')!='P')\n    .withColumn('total_at_bats', F.sum('at_bats').over(W.Window.partitionBy('team')))\n    .withColumn('pct_total_at_bats', F.col('at_bats')/F.col('total_at_bats'))\n    .toPandas()\n    .head(3)\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=66}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>player_id</th>\n      <th>team</th>\n      <th>first_name</th>\n      <th>last_name</th>\n      <th>position</th>\n      <th>batting_stance</th>\n      <th>at_bats</th>\n      <th>obp</th>\n      <th>total_at_bats</th>\n      <th>pct_total_at_bats</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>Padres</td>\n      <td>juan</td>\n      <td>soto</td>\n      <td>RF</td>\n      <td>L</td>\n      <td>524.0</td>\n      <td>0.401</td>\n      <td>4649.0</td>\n      <td>0.112712</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>Padres</td>\n      <td>Manny</td>\n      <td>Machado</td>\n      <td>3B</td>\n      <td>R</td>\n      <td>578.0</td>\n      <td>0.366</td>\n      <td>4649.0</td>\n      <td>0.124328</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>4</td>\n      <td>Padres</td>\n      <td>He-Seong</td>\n      <td>Kim</td>\n      <td>SS</td>\n      <td>R</td>\n      <td>517.0</td>\n      <td>0.325</td>\n      <td>4649.0</td>\n      <td>0.111207</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::::\n\n",
    "supporting": [
      "Untitled_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}