{
  "hash": "d4fb012fd6b7b5b8a525c77089ed896f",
  "result": {
    "markdown": "---\ntitle: Get Financial Data by Stock Ticker From the data.sec.gov API\ndescription: 'A notebook, with code, showing how to pull data from sec.gov web APIâ€™s'\nauthor: Scott Wied\ndate: 11/06/2022\ncategories:\n  - Pandas\n  - API's\n  - Matplotlib\n  - Finance\n  - Python\nimage: image.png\nformat:\n  html:\n    code-fold: false\nnumber-sections: true\ntoc: true\ntoc-location: left\ncode-line-numbers: true\nexecute:\n  warning: false\n---\n\n:::: {.column-page-right}\n\n## Import python packages\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport requests\nimport json\nfrom pprint import pprint\nimport pandas as pd\nimport numpy as np\nimport re\nimport matplotlib.pyplot as plt\n```\n:::\n\n\n## Parameters\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\n# Which company do you wish to track?\nticker = 'AAPL'\n\n# An email address needs to be included in the URL of the API call\nemail_address = 'your-email@example.com'  \n```\n:::\n\n\n## Find the CIK number for the chosen stock ticker\n\n### Request ticker exchange data from the sec.gov API\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\n# Run the API request   \nrequest_info = requests.get('https://sec.gov/files/company_tickers_exchange.json')\n\n# Print the returned status code (200 is good, 404 is bad) and other content info.\nprint(\"Request status code:\", request_info.status_code)\nprint(\"Content Type:\", request_info.headers['Content-Type'])\nprint(\"Content Length:\", request_info.headers['Content-Length'], 'bytes')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRequest status code: 200\nContent Type: application/json\nContent Length: 214545 bytes\n```\n:::\n:::\n\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\n# Put the requested content into a Python dict object using the `.json()` method\nrequest_data = request_info.json()\n```\n:::\n\n\n### Explore the data that was returned\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\n# We know that request_data is a dictionary, so let's list all of its keys. \nprint(\"request_data:\", request_data.keys())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nrequest_data: dict_keys(['fields', 'data'])\n```\n:::\n:::\n\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nrequest_data['fields']\n```\n\n::: {.cell-output .cell-output-display execution_count=23}\n```\n['cik', 'name', 'ticker', 'exchange']\n```\n:::\n:::\n\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nrequest_data['data'][0:10]\n```\n\n::: {.cell-output .cell-output-display execution_count=24}\n```\n[[320193, 'Apple Inc.', 'AAPL', 'Nasdaq'],\n [789019, 'MICROSOFT CORP', 'MSFT', 'Nasdaq'],\n [1018724, 'AMAZON COM INC', 'AMZN', 'Nasdaq'],\n [1067983, 'BERKSHIRE HATHAWAY INC', 'BRK-B', 'NYSE'],\n [731766, 'UNITEDHEALTH GROUP INC', 'UNH', 'NYSE'],\n [34088, 'EXXON MOBIL CORP', 'XOM', 'NYSE'],\n [200406, 'JOHNSON & JOHNSON', 'JNJ', 'NYSE'],\n [104169, 'Walmart Inc.', 'WMT', 'NYSE'],\n [19617, 'JPMORGAN CHASE & CO', 'JPM', 'NYSE'],\n [93410, 'CHEVRON CORP', 'CVX', 'NYSE']]\n```\n:::\n:::\n\n\n### Create a Pandas dataframe from the API content\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\n# Create a new dataframe\ndf_tickers = (\n    pd.DataFrame(data=request_data['data'], \n                 columns=request_data['fields'])\n    .set_index('ticker')\n)\n\n# Display the top few rows\ndf_tickers.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=25}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>cik</th>\n      <th>name</th>\n      <th>exchange</th>\n    </tr>\n    <tr>\n      <th>ticker</th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>AAPL</th>\n      <td>320193</td>\n      <td>Apple Inc.</td>\n      <td>Nasdaq</td>\n    </tr>\n    <tr>\n      <th>MSFT</th>\n      <td>789019</td>\n      <td>MICROSOFT CORP</td>\n      <td>Nasdaq</td>\n    </tr>\n    <tr>\n      <th>AMZN</th>\n      <td>1018724</td>\n      <td>AMAZON COM INC</td>\n      <td>Nasdaq</td>\n    </tr>\n    <tr>\n      <th>BRK-B</th>\n      <td>1067983</td>\n      <td>BERKSHIRE HATHAWAY INC</td>\n      <td>NYSE</td>\n    </tr>\n    <tr>\n      <th>UNH</th>\n      <td>731766</td>\n      <td>UNITEDHEALTH GROUP INC</td>\n      <td>NYSE</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\n# Slice the dataframe to show only the row where ticker=='AAPL'\ndf_tickers.query(f\"ticker=='{ticker}'\")\n```\n\n::: {.cell-output .cell-output-display execution_count=26}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>cik</th>\n      <th>name</th>\n      <th>exchange</th>\n    </tr>\n    <tr>\n      <th>ticker</th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>AAPL</th>\n      <td>320193</td>\n      <td>Apple Inc.</td>\n      <td>Nasdaq</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### Create a function to pull data for a single ticker and format the CIK as a string\n\nThis is necessary because in the next section we will need to add a formatted CID to the API call.\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\ndef get_cik_string(ticker_data, ticker_symbol):\n    ticker_symbol = ticker_symbol.upper()\n    data_slice = ticker_data.loc[[ticker_symbol],['cik']]\n    cik_value = data_slice.values[0][0]\n    cik_string = 'CIK' + str(cik_value).rjust(10, '0')\n    return cik_string\n```\n:::\n\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\n# Example for our ticker\nprint(\"ticker:\", ticker)\nprint(\"CIK:\",    get_cik_string(df_tickers, ticker))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nticker: AAPL\nCIK: CIK0000320193\n```\n:::\n:::\n\n\n## Get financial data from data.sec.gov api for a specific XBRL line item tag\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\n# Build up the request URL\ncik = get_cik_string(df_tickers, ticker)\ntag = 'Assets'\nurl = f\"https://data.sec.gov/api/xbrl/companyconcept/{cik}/us-gaap/{tag}.json\"\n\nprint(\"URL:\", url)\n\n# Run the API request   \nrequest_tag_data = requests.get(url, headers={'User-Agent': email_address})\n\n# Print the status code (200 is good, 404 is bad), and other content info.\nprint(\"Request status code:\", request_tag_data.status_code)\nprint(\"Content Type:\", request_tag_data.headers['Content-Type'])\nprint(\"Content Length:\", request_tag_data.headers['Content-Length'], 'bytes')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nURL: https://data.sec.gov/api/xbrl/companyconcept/CIK0000320193/us-gaap/Assets.json\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nRequest status code: 200\nContent Type: application/json\nContent Length: 2052 bytes\n```\n:::\n:::\n\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\ntag_data = request_tag_data.json()\n\npprint(tag_data, depth=2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{'cik': 320193,\n 'description': 'Sum of the carrying amounts as of the balance sheet date of '\n                'all assets that are recognized. Assets are probable future '\n                'economic benefits obtained or controlled by an entity as a '\n                'result of past transactions or events.',\n 'entityName': 'Apple Inc.',\n 'label': 'Assets',\n 'tag': 'Assets',\n 'taxonomy': 'us-gaap',\n 'units': {'USD': [...]}}\n```\n:::\n:::\n\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\ndf_tag_data = pd.DataFrame.from_dict(tag_data['units']['USD'])\n```\n:::\n\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\ndf_tag_data\n```\n\n::: {.cell-output .cell-output-display execution_count=32}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>end</th>\n      <th>val</th>\n      <th>accn</th>\n      <th>fy</th>\n      <th>fp</th>\n      <th>form</th>\n      <th>filed</th>\n      <th>frame</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2008-09-27</td>\n      <td>39572000000</td>\n      <td>0001193125-09-153165</td>\n      <td>2009</td>\n      <td>Q3</td>\n      <td>10-Q</td>\n      <td>2009-07-22</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2008-09-27</td>\n      <td>39572000000</td>\n      <td>0001193125-09-214859</td>\n      <td>2009</td>\n      <td>FY</td>\n      <td>10-K</td>\n      <td>2009-10-27</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2008-09-27</td>\n      <td>36171000000</td>\n      <td>0001193125-10-012091</td>\n      <td>2009</td>\n      <td>FY</td>\n      <td>10-K/A</td>\n      <td>2010-01-25</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2008-09-27</td>\n      <td>36171000000</td>\n      <td>0001193125-10-238044</td>\n      <td>2010</td>\n      <td>FY</td>\n      <td>10-K</td>\n      <td>2010-10-27</td>\n      <td>CY2008Q3I</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2009-06-27</td>\n      <td>48140000000</td>\n      <td>0001193125-09-153165</td>\n      <td>2009</td>\n      <td>Q3</td>\n      <td>10-Q</td>\n      <td>2009-07-22</td>\n      <td>CY2009Q2I</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>111</th>\n      <td>2021-09-25</td>\n      <td>351002000000</td>\n      <td>0000320193-22-000108</td>\n      <td>2022</td>\n      <td>FY</td>\n      <td>10-K</td>\n      <td>2022-10-28</td>\n      <td>CY2021Q3I</td>\n    </tr>\n    <tr>\n      <th>112</th>\n      <td>2021-12-25</td>\n      <td>381191000000</td>\n      <td>0000320193-22-000007</td>\n      <td>2022</td>\n      <td>Q1</td>\n      <td>10-Q</td>\n      <td>2022-01-28</td>\n      <td>CY2021Q4I</td>\n    </tr>\n    <tr>\n      <th>113</th>\n      <td>2022-03-26</td>\n      <td>350662000000</td>\n      <td>0000320193-22-000059</td>\n      <td>2022</td>\n      <td>Q2</td>\n      <td>10-Q</td>\n      <td>2022-04-29</td>\n      <td>CY2022Q1I</td>\n    </tr>\n    <tr>\n      <th>114</th>\n      <td>2022-06-25</td>\n      <td>336309000000</td>\n      <td>0000320193-22-000070</td>\n      <td>2022</td>\n      <td>Q3</td>\n      <td>10-Q</td>\n      <td>2022-07-29</td>\n      <td>CY2022Q2I</td>\n    </tr>\n    <tr>\n      <th>115</th>\n      <td>2022-09-24</td>\n      <td>352755000000</td>\n      <td>0000320193-22-000108</td>\n      <td>2022</td>\n      <td>FY</td>\n      <td>10-K</td>\n      <td>2022-10-28</td>\n      <td>CY2022Q3I</td>\n    </tr>\n  </tbody>\n</table>\n<p>116 rows Ã— 8 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\n# Filter rows to only those with current year (CY) labels\nstarts_with_cy = lambda x: bool(isinstance(re.search(r'^CY', x), re.Match))\nx_axis_name = 'End Date'\ny_axis_name = f'{tag} (USD in Billions)'\n\ndf_plot_data = (\n    df_tag_data\n    .query(\"form == '10-Q'\")\n    .assign(yr_mon      = lambda x: [f\"{y[0]}-{y[1]}\" for y in zip(x.fy, x.fp)] )\n    .assign(filter_flag = lambda x: [starts_with_cy(str(y)) for y in x.frame])\n    .query(\"filter_flag==True\")\n    .filter(['end', 'val'])\n    .assign(val = lambda x: x.val/1000000000)\n    .rename(columns={'end':x_axis_name, 'val':y_axis_name})\n    .sort_values(by=x_axis_name)\n)\n\ndf_plot_data.tail(10)\n```\n\n::: {.cell-output .cell-output-display execution_count=33}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>End Date</th>\n      <th>Assets (USD in Billions)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>90</th>\n      <td>2019-06-29</td>\n      <td>322.239</td>\n    </tr>\n    <tr>\n      <th>96</th>\n      <td>2019-12-28</td>\n      <td>340.618</td>\n    </tr>\n    <tr>\n      <th>97</th>\n      <td>2020-03-28</td>\n      <td>320.400</td>\n    </tr>\n    <tr>\n      <th>98</th>\n      <td>2020-06-27</td>\n      <td>317.344</td>\n    </tr>\n    <tr>\n      <th>104</th>\n      <td>2020-12-26</td>\n      <td>354.054</td>\n    </tr>\n    <tr>\n      <th>105</th>\n      <td>2021-03-27</td>\n      <td>337.158</td>\n    </tr>\n    <tr>\n      <th>106</th>\n      <td>2021-06-26</td>\n      <td>329.840</td>\n    </tr>\n    <tr>\n      <th>112</th>\n      <td>2021-12-25</td>\n      <td>381.191</td>\n    </tr>\n    <tr>\n      <th>113</th>\n      <td>2022-03-26</td>\n      <td>350.662</td>\n    </tr>\n    <tr>\n      <th>114</th>\n      <td>2022-06-25</td>\n      <td>336.309</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\ndf_plot_data.plot(kind = 'bar', x = x_axis_name, y = y_axis_name, \n                  figsize=(11, 6), title = f\"{ticker} {tag}\")\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](stock_ticker_data_files/figure-html/cell-18-output-1.png){width=872 height=588}\n:::\n:::\n\n\n::::\n\n",
    "supporting": [
      "stock_ticker_data_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}