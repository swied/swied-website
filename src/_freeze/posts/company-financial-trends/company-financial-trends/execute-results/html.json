{
  "hash": "2c0e2f7b64f319902447ae2eb1fbab6a",
  "result": {
    "markdown": "---\ntitle: Company Financial Trends\ndescription: Get free financial reporting data on any public company from data.sec.gov using an API.  You can actually get time series trends for any line item (XBRL tag) in their financial reporting documents.\nauthor: Scott Wied\ndate: 11/06/2022\ncategories:\n  - Pandas\n  - API's\n  - Matplotlib\n  - Finance\n  - Python\nimage: image.png\nformat:\n  html:\n    code-fold: false\n    page-layout: article\nnumber-sections: true\ntoc: true\ntoc-location: left\ncode-line-numbers: true\nexecute:\n  warning: false\n---\n\n## Introduction\n\nIf you want to do fundamental research on a publicly traded company, then there are a lot of services that will charge you a lot of money for that data.  What if you don't have a lot of money?  And, what if you don't trust any data that doesn't come directly from its source?  In this article I will show you how to use the vast data resources provided by the US government... for free.  \n\n## Intro to XBRL tagging\n\nA public company is required, by the SEC, to use XBRL line item tags whenever it files its 10-Q (quarterly) and 10-K (annual) financial reports.  There is an sec.gov API that you can use to get data on the performance of a companies fundamental metrics over time.  You will need the XBRL tag name for each metric that you wish to track.\n\nBelow is a quote from an [XBRL Wikipedia article](https://en.wikipedia.org/wiki/XBRL) that gives a technical desciption of the XBRL standard:\n\n> XBRL (eXtensible Business Reporting Language) is a freely available and global framework for exchanging business information. XBRL allows the expression of semantic meaning commonly required in business reporting. The language is XML-based and uses the XML syntax and related XML technologies such as XML Schema, XLink, XPath, and Namespaces. One use of XBRL is to define and exchange financial information, such as a financial statement. The XBRL Specification is developed and published by XBRL International, Inc. (XII).\n\nThe SEC has a [page that describes how they use XBRL](https://www.sec.gov/structureddata/osd-inline-xbrl.html).  It even includes a link to a [YouTube video](https://youtu.be/zTyhOvE79DQ) that you can watch sometime if you are having trouble sleeping. \n\nThe best way to become familiar with XBRL is to go through an example.  Let's do that below.\n\n### Find the CIK for Apple\n\nAs and example, let's use Apple (stock ticker: APPL).  Every company that files with the SEC receives a central index key (CIK).  The API that we will use requires this CIK code.\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nticker = 'AAPL'\n```\n:::\n\n\nStart by [doing a search for a company on EDGAR](https://www.sec.gov/edgar/searchedgar/companysearch).  Look for the company CIK code (circled in red below) as you type in the ticker symbol.  Write this value down, and then click on the search result.\n\n<img src=\"./resources/sec-edgar-company-lookup.png\" width=\"350\"/>\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\n# Create a variable from the CIK code in the \n# above image.  Make sure that the CIK is\n# uppercase, and that there is no space in the name.\ncik = 'CIK0000320193'\n```\n:::\n\n\n### Open a 10-K report\n\nThe next page (see below) will display the search results for the chosen company.  Notice that the numeric part of the CIK code is included in the URL.  Now, click on one of the 10-K or 10-Q reports listed under \"Selected Filings\"\n\n<img src=\"./resources/sec-edgar-company-search-results.jpg\" width=\"350\"/>\n\nThere are several files shown on the Filing Detail page (see below).  We are about the top on with the green <font color=green>*iXBRL*</font> note beside it.  Click on the link to open the filed report.\n\n<img src=\"./resources/sec-edgar-company-filing-details.png\" width=\"350\"/>\n\n### Find the finacial statements\n\nThese SEC filing reports can be quite wordy.  Scroll down to the table of contents (see below) after opening the document.  Find the section titled *Financial Statements* and click on the bookmark link.  This will take you to the page where you will find several financial reports.\n\n<img src=\"./resources/sec-edgar-company-filing-toc.png\" width=\"350\"/>\n\n### Identify the *Net Income* line item\n\nScroll down a little bit, until you see a table of numbers.  These reports are all in a specific format that is mandated by the SEC.  Each line item name is registered approved XBRL tags.  If you want to find the name of the tag, then click on one of the numbers with red lines above and below it.\n\n<img src=\"./resources/sec-edgar-10k-statement-of-operations.png\" width=\"350\"/>\n\n### Find the XBRL tag name for *Net Income*\n\nA pop-up window will appear (see below) showing the attributes of that line item value.  Find the *Tag* attribute row, and copy the part that says, *'NetincomeLoss'*.  This is our XBRL tag name!  We now have all of the information that we need to use the API.\n\n<img src=\"./resources/sec-edgar-popup-tag-name.png\" width=\"350\"/>\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\n# Create a variable with the XBRL tag name.\n# Note that it is case sensitive.\nxbrl_tag = 'NetIncomeLoss'\n```\n:::\n\n\n## API data pull\n\nIn our example, we will attempt to plot the quarterly trend for Apple's *Net Income* line item.  We will be pulling the data from the [data.sec.gov api](https://www.sec.gov/edgar/sec-api-documentation).\n\n### Import python packages\n\nThese are the packages that we will need.  All of them can be downloaded and installed with [Anaconda](https://www.anaconda.com/products/distribution).\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nimport requests\nimport json\nfrom pprint import pprint\nimport pandas as pd\nimport numpy as np\nimport re\nimport matplotlib.pyplot as plt\nimport altair as alt\nimport pandasql\n```\n:::\n\n\nIn this example \n\n### Make the API Call\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\n# Build up the API request URL\napi_url_path = 'https://data.sec.gov/api/xbrl/companyconcept'\nurl = f\"{api_url_path}/{cik}/us-gaap/{xbrl_tag}.json\"\n\n# Run the API request\n# Note the it will not run without your email address\nemail_address = 'your-email@example.com'\nrequest_tag_data = (\n    requests\n    .get(url, \n         headers={'User-Agent': email_address}))\n\n# Print the status code (200 is good, 404 is bad)\nprint(\"Request status code:\", request_tag_data.status_code)\nprint(\"Content Type:\", request_tag_data.headers['Content-Type'])\nprint(\"Content Length:\", \n      request_tag_data.headers['Content-Length'], 'bytes')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRequest status code: 200\nContent Type: application/json\nContent Length: 3281 bytes\n```\n:::\n:::\n\n\n### Take a look at the raw JSON data\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\ntag_data = request_tag_data.json()\npprint(tag_data, depth=2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{'cik': 320193,\n 'description': 'The portion of profit or loss for the period, net of income '\n                'taxes, which is attributable to the parent.',\n 'entityName': 'Apple Inc.',\n 'label': 'Net Income (Loss) Attributable to Parent',\n 'tag': 'NetIncomeLoss',\n 'taxonomy': 'us-gaap',\n 'units': {'USD': [...]}}\n```\n:::\n:::\n\n\n### Convert to a Pandas Dataframe\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\ndf_tag_data = pd.DataFrame.from_dict(tag_data['units']['USD'])\ndf_tag_data.sort_values(by=['filed','fy','fp']).tail(15)\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>start</th>\n      <th>end</th>\n      <th>val</th>\n      <th>accn</th>\n      <th>fy</th>\n      <th>fp</th>\n      <th>form</th>\n      <th>filed</th>\n      <th>frame</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>268</th>\n      <td>2019-09-29</td>\n      <td>2020-09-26</td>\n      <td>57411000000</td>\n      <td>0000320193-21-000105</td>\n      <td>2021</td>\n      <td>FY</td>\n      <td>10-K</td>\n      <td>2021-10-29</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>281</th>\n      <td>2020-09-27</td>\n      <td>2021-09-25</td>\n      <td>94680000000</td>\n      <td>0000320193-21-000105</td>\n      <td>2021</td>\n      <td>FY</td>\n      <td>10-K</td>\n      <td>2021-10-29</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>272</th>\n      <td>2020-09-27</td>\n      <td>2020-12-26</td>\n      <td>28755000000</td>\n      <td>0000320193-22-000007</td>\n      <td>2022</td>\n      <td>Q1</td>\n      <td>10-Q</td>\n      <td>2022-01-28</td>\n      <td>CY2020Q4</td>\n    </tr>\n    <tr>\n      <th>283</th>\n      <td>2021-09-26</td>\n      <td>2021-12-25</td>\n      <td>34630000000</td>\n      <td>0000320193-22-000007</td>\n      <td>2022</td>\n      <td>Q1</td>\n      <td>10-Q</td>\n      <td>2022-01-28</td>\n      <td>CY2021Q4</td>\n    </tr>\n    <tr>\n      <th>274</th>\n      <td>2020-09-27</td>\n      <td>2021-03-27</td>\n      <td>52385000000</td>\n      <td>0000320193-22-000059</td>\n      <td>2022</td>\n      <td>Q2</td>\n      <td>10-Q</td>\n      <td>2022-04-29</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>276</th>\n      <td>2020-12-27</td>\n      <td>2021-03-27</td>\n      <td>23630000000</td>\n      <td>0000320193-22-000059</td>\n      <td>2022</td>\n      <td>Q2</td>\n      <td>10-Q</td>\n      <td>2022-04-29</td>\n      <td>CY2021Q1</td>\n    </tr>\n    <tr>\n      <th>284</th>\n      <td>2021-09-26</td>\n      <td>2022-03-26</td>\n      <td>59640000000</td>\n      <td>0000320193-22-000059</td>\n      <td>2022</td>\n      <td>Q2</td>\n      <td>10-Q</td>\n      <td>2022-04-29</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>285</th>\n      <td>2021-12-26</td>\n      <td>2022-03-26</td>\n      <td>25010000000</td>\n      <td>0000320193-22-000059</td>\n      <td>2022</td>\n      <td>Q2</td>\n      <td>10-Q</td>\n      <td>2022-04-29</td>\n      <td>CY2022Q1</td>\n    </tr>\n    <tr>\n      <th>278</th>\n      <td>2020-09-27</td>\n      <td>2021-06-26</td>\n      <td>74129000000</td>\n      <td>0000320193-22-000070</td>\n      <td>2022</td>\n      <td>Q3</td>\n      <td>10-Q</td>\n      <td>2022-07-29</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>280</th>\n      <td>2021-03-28</td>\n      <td>2021-06-26</td>\n      <td>21744000000</td>\n      <td>0000320193-22-000070</td>\n      <td>2022</td>\n      <td>Q3</td>\n      <td>10-Q</td>\n      <td>2022-07-29</td>\n      <td>CY2021Q2</td>\n    </tr>\n    <tr>\n      <th>286</th>\n      <td>2021-09-26</td>\n      <td>2022-06-25</td>\n      <td>79082000000</td>\n      <td>0000320193-22-000070</td>\n      <td>2022</td>\n      <td>Q3</td>\n      <td>10-Q</td>\n      <td>2022-07-29</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>287</th>\n      <td>2022-03-27</td>\n      <td>2022-06-25</td>\n      <td>19442000000</td>\n      <td>0000320193-22-000070</td>\n      <td>2022</td>\n      <td>Q3</td>\n      <td>10-Q</td>\n      <td>2022-07-29</td>\n      <td>CY2022Q2</td>\n    </tr>\n    <tr>\n      <th>269</th>\n      <td>2019-09-29</td>\n      <td>2020-09-26</td>\n      <td>57411000000</td>\n      <td>0000320193-22-000108</td>\n      <td>2022</td>\n      <td>FY</td>\n      <td>10-K</td>\n      <td>2022-10-28</td>\n      <td>CY2020</td>\n    </tr>\n    <tr>\n      <th>282</th>\n      <td>2020-09-27</td>\n      <td>2021-09-25</td>\n      <td>94680000000</td>\n      <td>0000320193-22-000108</td>\n      <td>2022</td>\n      <td>FY</td>\n      <td>10-K</td>\n      <td>2022-10-28</td>\n      <td>CY2021</td>\n    </tr>\n    <tr>\n      <th>288</th>\n      <td>2021-09-26</td>\n      <td>2022-09-24</td>\n      <td>99803000000</td>\n      <td>0000320193-22-000108</td>\n      <td>2022</td>\n      <td>FY</td>\n      <td>10-K</td>\n      <td>2022-10-28</td>\n      <td>CY2022</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nNote a few things about the above table:\n\n1. There are multiple records for each quarter. This is because the financial report shows values for the current quarter, the previous quarter, and the current quarter from the previous fiscal year.  It would be great if the API provided a filed describing which quarter time period was which.  When we go to plot the graph we will only want to include the current quarters value for each quarter.\n2. The values for Q1, Q2, and Q3 come from the form 10-Q.  There is no 10-Q for Q4, and the 10-K report only shows yearly totals.  In order to find the values for Q4 of each year we'll need to take the annual total and subtract the totals from Q1-3. \n\n## Clean and filter data\n\nSince the data set does not have a column indicating which quarter each value is associated with, we will have to use a brute force approach.  We'll have to use a window function to pick a single record for each fiscal year & quarter.  The syntax for doing window operations in Pandas is a little weird, IMO.  I think that it's easier to do this in SQL, so lets use the *sqldf* function from the pandasql package.\n\n### Rank records over fiscal year and period\n\nIn our first SQL query (see below), we are going to rank records over partitions defined by fiscal year and fiscal period.  We'll calculate the number of days in between the dates *start* and *end*.  And, finally, we'll create a new *val_10q* column to indicate the values that came from 10-Q reports.  We'll need it later when we subtract the sum of the values for Q1-3 from the annual amount to calculate the Q4 value.\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\ndf_rank = pandasql.sqldf(\"\"\"\n    select fy, fp, end, start,\n        (   julianday(date(end))\n           -julianday(date(start))\n        ) as num_days_in_period,\n        val, form,\n        (   case \n            when form='10-Q'\n            then val\n            else 0\n            end\n        ) as val_10q,\n        rank()\n        over(\n            partition by fy, fp\n            order by \n                end desc, \n                start desc\n        ) as rnk\n    from df_tag_data\n    where form in('10-Q','10-K')\n\"\"\")\n\ndf_rank.tail(15)\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>fy</th>\n      <th>fp</th>\n      <th>end</th>\n      <th>start</th>\n      <th>num_days_in_period</th>\n      <th>val</th>\n      <th>form</th>\n      <th>val_10q</th>\n      <th>rnk</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>249</th>\n      <td>2021</td>\n      <td>Q3</td>\n      <td>2020-06-27</td>\n      <td>2020-03-29</td>\n      <td>90.0</td>\n      <td>11253000000</td>\n      <td>10-Q</td>\n      <td>11253000000</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>250</th>\n      <td>2021</td>\n      <td>Q3</td>\n      <td>2020-06-27</td>\n      <td>2019-09-29</td>\n      <td>272.0</td>\n      <td>44738000000</td>\n      <td>10-Q</td>\n      <td>44738000000</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>251</th>\n      <td>2022</td>\n      <td>FY</td>\n      <td>2022-09-24</td>\n      <td>2021-09-26</td>\n      <td>363.0</td>\n      <td>99803000000</td>\n      <td>10-K</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>252</th>\n      <td>2022</td>\n      <td>FY</td>\n      <td>2021-09-25</td>\n      <td>2020-09-27</td>\n      <td>363.0</td>\n      <td>94680000000</td>\n      <td>10-K</td>\n      <td>0</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>253</th>\n      <td>2022</td>\n      <td>FY</td>\n      <td>2020-09-26</td>\n      <td>2019-09-29</td>\n      <td>363.0</td>\n      <td>57411000000</td>\n      <td>10-K</td>\n      <td>0</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>254</th>\n      <td>2022</td>\n      <td>Q1</td>\n      <td>2021-12-25</td>\n      <td>2021-09-26</td>\n      <td>90.0</td>\n      <td>34630000000</td>\n      <td>10-Q</td>\n      <td>34630000000</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>255</th>\n      <td>2022</td>\n      <td>Q1</td>\n      <td>2020-12-26</td>\n      <td>2020-09-27</td>\n      <td>90.0</td>\n      <td>28755000000</td>\n      <td>10-Q</td>\n      <td>28755000000</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>256</th>\n      <td>2022</td>\n      <td>Q2</td>\n      <td>2022-03-26</td>\n      <td>2021-12-26</td>\n      <td>90.0</td>\n      <td>25010000000</td>\n      <td>10-Q</td>\n      <td>25010000000</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>257</th>\n      <td>2022</td>\n      <td>Q2</td>\n      <td>2022-03-26</td>\n      <td>2021-09-26</td>\n      <td>181.0</td>\n      <td>59640000000</td>\n      <td>10-Q</td>\n      <td>59640000000</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>258</th>\n      <td>2022</td>\n      <td>Q2</td>\n      <td>2021-03-27</td>\n      <td>2020-12-27</td>\n      <td>90.0</td>\n      <td>23630000000</td>\n      <td>10-Q</td>\n      <td>23630000000</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>259</th>\n      <td>2022</td>\n      <td>Q2</td>\n      <td>2021-03-27</td>\n      <td>2020-09-27</td>\n      <td>181.0</td>\n      <td>52385000000</td>\n      <td>10-Q</td>\n      <td>52385000000</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>260</th>\n      <td>2022</td>\n      <td>Q3</td>\n      <td>2022-06-25</td>\n      <td>2022-03-27</td>\n      <td>90.0</td>\n      <td>19442000000</td>\n      <td>10-Q</td>\n      <td>19442000000</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>261</th>\n      <td>2022</td>\n      <td>Q3</td>\n      <td>2022-06-25</td>\n      <td>2021-09-26</td>\n      <td>272.0</td>\n      <td>79082000000</td>\n      <td>10-Q</td>\n      <td>79082000000</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>262</th>\n      <td>2022</td>\n      <td>Q3</td>\n      <td>2021-06-26</td>\n      <td>2021-03-28</td>\n      <td>90.0</td>\n      <td>21744000000</td>\n      <td>10-Q</td>\n      <td>21744000000</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>263</th>\n      <td>2022</td>\n      <td>Q3</td>\n      <td>2021-06-26</td>\n      <td>2020-09-27</td>\n      <td>272.0</td>\n      <td>74129000000</td>\n      <td>10-Q</td>\n      <td>74129000000</td>\n      <td>4</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### Filter the dataframe for rank=1 records\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\ndf_filtered = pandasql.sqldf(\"\"\"\n    select \n        fy, fp, \n        end, start,\n        num_days_in_period,\n        val, form,\n        sum(val_10q) \n        over(partition by fy\n            ) as total_val_10q\n    from df_rank\n    where rnk=1\n\"\"\")\n\ndf_filtered.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>fy</th>\n      <th>fp</th>\n      <th>end</th>\n      <th>start</th>\n      <th>num_days_in_period</th>\n      <th>val</th>\n      <th>form</th>\n      <th>total_val_10q</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2009</td>\n      <td>FY</td>\n      <td>2009-09-26</td>\n      <td>2008-09-28</td>\n      <td>363.0</td>\n      <td>5704000000</td>\n      <td>10-K</td>\n      <td>1229000000</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2009</td>\n      <td>Q3</td>\n      <td>2009-06-27</td>\n      <td>2009-03-29</td>\n      <td>90.0</td>\n      <td>1229000000</td>\n      <td>10-Q</td>\n      <td>1229000000</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2010</td>\n      <td>FY</td>\n      <td>2010-09-25</td>\n      <td>2010-06-27</td>\n      <td>90.0</td>\n      <td>4308000000</td>\n      <td>10-K</td>\n      <td>9705000000</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2010</td>\n      <td>Q1</td>\n      <td>2009-12-26</td>\n      <td>2009-09-27</td>\n      <td>90.0</td>\n      <td>3378000000</td>\n      <td>10-Q</td>\n      <td>9705000000</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2010</td>\n      <td>Q2</td>\n      <td>2010-03-27</td>\n      <td>2009-12-27</td>\n      <td>90.0</td>\n      <td>3074000000</td>\n      <td>10-Q</td>\n      <td>9705000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### Finalize data for plotting\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\nx_axis_name = 'End Date'\ny_axis_name = f'{xbrl_tag} (USD in Billions)'\n\ndf_plot_data = pandasql.sqldf(f\"\"\"\nselect\n    fy as `Fiscal Year`, \n    (   case \n        when fp='FY' then 'Q4'\n        else fp\n        end\n    ) as `Fiscal Quarter`,\n    end as `{x_axis_name}`,\n    round(   \n        case when form='10-K' \n            and num_days_in_period > 360\n        then (val-total_val_10q)/1e9\n        else val/1e9\n        end, \n        2\n    ) as `{y_axis_name}`\nfrom df_filtered\norder by `{x_axis_name}`\n\"\"\")\n\ndf_plot_data.tail()\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Fiscal Year</th>\n      <th>Fiscal Quarter</th>\n      <th>End Date</th>\n      <th>NetIncomeLoss (USD in Billions)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>49</th>\n      <td>2021</td>\n      <td>Q4</td>\n      <td>2021-09-25</td>\n      <td>20.55</td>\n    </tr>\n    <tr>\n      <th>50</th>\n      <td>2022</td>\n      <td>Q1</td>\n      <td>2021-12-25</td>\n      <td>34.63</td>\n    </tr>\n    <tr>\n      <th>51</th>\n      <td>2022</td>\n      <td>Q2</td>\n      <td>2022-03-26</td>\n      <td>25.01</td>\n    </tr>\n    <tr>\n      <th>52</th>\n      <td>2022</td>\n      <td>Q3</td>\n      <td>2022-06-25</td>\n      <td>19.44</td>\n    </tr>\n    <tr>\n      <th>53</th>\n      <td>2022</td>\n      <td>Q4</td>\n      <td>2022-09-24</td>\n      <td>20.72</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Show trend as a bart chart\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\nalt.Chart(df_plot_data).mark_bar().encode(\n    x = alt.X(x_axis_name, \n              axis = alt.Axis(labelOverlap='greedy')),\n    y = y_axis_name,\n).properties(\n    title = f\"{ticker} - {y_axis_name}\",\n    width = 300,\n    height = 200\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```{=html}\n\n<div id=\"altair-viz-c092d19ccba441b18da634c100c6ad3d\"></div>\n<script type=\"text/javascript\">\n  (function(spec, embedOpt){\n    let outputDiv = document.currentScript.previousElementSibling;\n    if (outputDiv.id !== \"altair-viz-c092d19ccba441b18da634c100c6ad3d\") {\n      outputDiv = document.getElementById(\"altair-viz-c092d19ccba441b18da634c100c6ad3d\");\n    }\n    const paths = {\n      \"vega\": \"https://cdn.jsdelivr.net/npm//vega@5?noext\",\n      \"vega-lib\": \"https://cdn.jsdelivr.net/npm//vega-lib?noext\",\n      \"vega-lite\": \"https://cdn.jsdelivr.net/npm//vega-lite@4.8.1?noext\",\n      \"vega-embed\": \"https://cdn.jsdelivr.net/npm//vega-embed@6?noext\",\n    };\n\n    function loadScript(lib) {\n      return new Promise(function(resolve, reject) {\n        var s = document.createElement('script');\n        s.src = paths[lib];\n        s.async = true;\n        s.onload = () => resolve(paths[lib]);\n        s.onerror = () => reject(`Error loading script: ${paths[lib]}`);\n        document.getElementsByTagName(\"head\")[0].appendChild(s);\n      });\n    }\n\n    function showError(err) {\n      outputDiv.innerHTML = `<div class=\"error\" style=\"color:red;\">${err}</div>`;\n      throw err;\n    }\n\n    function displayChart(vegaEmbed) {\n      vegaEmbed(outputDiv, spec, embedOpt)\n        .catch(err => showError(`Javascript Error: ${err.message}<br>This usually means there's a typo in your chart specification. See the javascript console for the full traceback.`));\n    }\n\n    if(typeof define === \"function\" && define.amd) {\n      requirejs.config({paths});\n      require([\"vega-embed\"], displayChart, err => showError(`Error loading script: ${err.message}`));\n    } else if (typeof vegaEmbed === \"function\") {\n      displayChart(vegaEmbed);\n    } else {\n      loadScript(\"vega\")\n        .then(() => loadScript(\"vega-lite\"))\n        .then(() => loadScript(\"vega-embed\"))\n        .catch(showError)\n        .then(() => displayChart(vegaEmbed));\n    }\n  })({\"config\": {\"view\": {\"continuousWidth\": 400, \"continuousHeight\": 300}}, \"data\": {\"name\": \"data-bc2a3fdf7cfdf7fbd2bc41cf255112c5\"}, \"mark\": \"bar\", \"encoding\": {\"x\": {\"type\": \"nominal\", \"axis\": {\"labelOverlap\": \"greedy\"}, \"field\": \"End Date\"}, \"y\": {\"type\": \"quantitative\", \"field\": \"NetIncomeLoss (USD in Billions)\"}}, \"height\": 200, \"title\": \"AAPL - NetIncomeLoss (USD in Billions)\", \"width\": 300, \"$schema\": \"https://vega.github.io/schema/vega-lite/v4.8.1.json\", \"datasets\": {\"data-bc2a3fdf7cfdf7fbd2bc41cf255112c5\": [{\"Fiscal Year\": 2009, \"Fiscal Quarter\": \"Q3\", \"End Date\": \"2009-06-27\", \"NetIncomeLoss (USD in Billions)\": 1.23}, {\"Fiscal Year\": 2009, \"Fiscal Quarter\": \"Q4\", \"End Date\": \"2009-09-26\", \"NetIncomeLoss (USD in Billions)\": 4.48}, {\"Fiscal Year\": 2010, \"Fiscal Quarter\": \"Q1\", \"End Date\": \"2009-12-26\", \"NetIncomeLoss (USD in Billions)\": 3.38}, {\"Fiscal Year\": 2010, \"Fiscal Quarter\": \"Q2\", \"End Date\": \"2010-03-27\", \"NetIncomeLoss (USD in Billions)\": 3.07}, {\"Fiscal Year\": 2010, \"Fiscal Quarter\": \"Q3\", \"End Date\": \"2010-06-26\", \"NetIncomeLoss (USD in Billions)\": 3.25}, {\"Fiscal Year\": 2010, \"Fiscal Quarter\": \"Q4\", \"End Date\": \"2010-09-25\", \"NetIncomeLoss (USD in Billions)\": 4.31}, {\"Fiscal Year\": 2011, \"Fiscal Quarter\": \"Q1\", \"End Date\": \"2010-12-25\", \"NetIncomeLoss (USD in Billions)\": 6.0}, {\"Fiscal Year\": 2011, \"Fiscal Quarter\": \"Q2\", \"End Date\": \"2011-03-26\", \"NetIncomeLoss (USD in Billions)\": 5.99}, {\"Fiscal Year\": 2011, \"Fiscal Quarter\": \"Q3\", \"End Date\": \"2011-06-25\", \"NetIncomeLoss (USD in Billions)\": 7.31}, {\"Fiscal Year\": 2011, \"Fiscal Quarter\": \"Q4\", \"End Date\": \"2011-09-24\", \"NetIncomeLoss (USD in Billions)\": 6.62}, {\"Fiscal Year\": 2012, \"Fiscal Quarter\": \"Q1\", \"End Date\": \"2011-12-31\", \"NetIncomeLoss (USD in Billions)\": 13.06}, {\"Fiscal Year\": 2012, \"Fiscal Quarter\": \"Q2\", \"End Date\": \"2012-03-31\", \"NetIncomeLoss (USD in Billions)\": 11.62}, {\"Fiscal Year\": 2012, \"Fiscal Quarter\": \"Q3\", \"End Date\": \"2012-06-30\", \"NetIncomeLoss (USD in Billions)\": 8.82}, {\"Fiscal Year\": 2012, \"Fiscal Quarter\": \"Q4\", \"End Date\": \"2012-09-29\", \"NetIncomeLoss (USD in Billions)\": 8.22}, {\"Fiscal Year\": 2013, \"Fiscal Quarter\": \"Q1\", \"End Date\": \"2012-12-29\", \"NetIncomeLoss (USD in Billions)\": 13.08}, {\"Fiscal Year\": 2013, \"Fiscal Quarter\": \"Q2\", \"End Date\": \"2013-03-30\", \"NetIncomeLoss (USD in Billions)\": 9.55}, {\"Fiscal Year\": 2013, \"Fiscal Quarter\": \"Q3\", \"End Date\": \"2013-06-29\", \"NetIncomeLoss (USD in Billions)\": 6.9}, {\"Fiscal Year\": 2013, \"Fiscal Quarter\": \"Q4\", \"End Date\": \"2013-09-28\", \"NetIncomeLoss (USD in Billions)\": 7.51}, {\"Fiscal Year\": 2014, \"Fiscal Quarter\": \"Q1\", \"End Date\": \"2013-12-28\", \"NetIncomeLoss (USD in Billions)\": 13.07}, {\"Fiscal Year\": 2014, \"Fiscal Quarter\": \"Q2\", \"End Date\": \"2014-03-29\", \"NetIncomeLoss (USD in Billions)\": 10.22}, {\"Fiscal Year\": 2014, \"Fiscal Quarter\": \"Q3\", \"End Date\": \"2014-06-28\", \"NetIncomeLoss (USD in Billions)\": 7.75}, {\"Fiscal Year\": 2014, \"Fiscal Quarter\": \"Q4\", \"End Date\": \"2014-09-27\", \"NetIncomeLoss (USD in Billions)\": 8.47}, {\"Fiscal Year\": 2015, \"Fiscal Quarter\": \"Q1\", \"End Date\": \"2014-12-27\", \"NetIncomeLoss (USD in Billions)\": 18.02}, {\"Fiscal Year\": 2015, \"Fiscal Quarter\": \"Q2\", \"End Date\": \"2015-03-28\", \"NetIncomeLoss (USD in Billions)\": 13.57}, {\"Fiscal Year\": 2015, \"Fiscal Quarter\": \"Q3\", \"End Date\": \"2015-06-27\", \"NetIncomeLoss (USD in Billions)\": 10.68}, {\"Fiscal Year\": 2015, \"Fiscal Quarter\": \"Q4\", \"End Date\": \"2015-09-26\", \"NetIncomeLoss (USD in Billions)\": 11.12}, {\"Fiscal Year\": 2016, \"Fiscal Quarter\": \"Q1\", \"End Date\": \"2015-12-26\", \"NetIncomeLoss (USD in Billions)\": 18.36}, {\"Fiscal Year\": 2016, \"Fiscal Quarter\": \"Q2\", \"End Date\": \"2016-03-26\", \"NetIncomeLoss (USD in Billions)\": 10.52}, {\"Fiscal Year\": 2016, \"Fiscal Quarter\": \"Q3\", \"End Date\": \"2016-06-25\", \"NetIncomeLoss (USD in Billions)\": 7.8}, {\"Fiscal Year\": 2016, \"Fiscal Quarter\": \"Q4\", \"End Date\": \"2016-09-24\", \"NetIncomeLoss (USD in Billions)\": 9.01}, {\"Fiscal Year\": 2017, \"Fiscal Quarter\": \"Q1\", \"End Date\": \"2016-12-31\", \"NetIncomeLoss (USD in Billions)\": 17.89}, {\"Fiscal Year\": 2017, \"Fiscal Quarter\": \"Q2\", \"End Date\": \"2017-04-01\", \"NetIncomeLoss (USD in Billions)\": 11.03}, {\"Fiscal Year\": 2017, \"Fiscal Quarter\": \"Q3\", \"End Date\": \"2017-07-01\", \"NetIncomeLoss (USD in Billions)\": 8.72}, {\"Fiscal Year\": 2017, \"Fiscal Quarter\": \"Q4\", \"End Date\": \"2017-09-30\", \"NetIncomeLoss (USD in Billions)\": 10.71}, {\"Fiscal Year\": 2018, \"Fiscal Quarter\": \"Q1\", \"End Date\": \"2017-12-30\", \"NetIncomeLoss (USD in Billions)\": 20.07}, {\"Fiscal Year\": 2018, \"Fiscal Quarter\": \"Q2\", \"End Date\": \"2018-03-31\", \"NetIncomeLoss (USD in Billions)\": 13.82}, {\"Fiscal Year\": 2018, \"Fiscal Quarter\": \"Q3\", \"End Date\": \"2018-06-30\", \"NetIncomeLoss (USD in Billions)\": 11.52}, {\"Fiscal Year\": 2018, \"Fiscal Quarter\": \"Q4\", \"End Date\": \"2018-09-29\", \"NetIncomeLoss (USD in Billions)\": 14.13}, {\"Fiscal Year\": 2019, \"Fiscal Quarter\": \"Q1\", \"End Date\": \"2018-12-29\", \"NetIncomeLoss (USD in Billions)\": 19.97}, {\"Fiscal Year\": 2019, \"Fiscal Quarter\": \"Q2\", \"End Date\": \"2019-03-30\", \"NetIncomeLoss (USD in Billions)\": 11.56}, {\"Fiscal Year\": 2019, \"Fiscal Quarter\": \"Q3\", \"End Date\": \"2019-06-29\", \"NetIncomeLoss (USD in Billions)\": 10.04}, {\"Fiscal Year\": 2019, \"Fiscal Quarter\": \"Q4\", \"End Date\": \"2019-09-28\", \"NetIncomeLoss (USD in Billions)\": 13.69}, {\"Fiscal Year\": 2020, \"Fiscal Quarter\": \"Q1\", \"End Date\": \"2019-12-28\", \"NetIncomeLoss (USD in Billions)\": 22.24}, {\"Fiscal Year\": 2020, \"Fiscal Quarter\": \"Q2\", \"End Date\": \"2020-03-28\", \"NetIncomeLoss (USD in Billions)\": 11.25}, {\"Fiscal Year\": 2020, \"Fiscal Quarter\": \"Q3\", \"End Date\": \"2020-06-27\", \"NetIncomeLoss (USD in Billions)\": 11.25}, {\"Fiscal Year\": 2020, \"Fiscal Quarter\": \"Q4\", \"End Date\": \"2020-09-26\", \"NetIncomeLoss (USD in Billions)\": 12.67}, {\"Fiscal Year\": 2021, \"Fiscal Quarter\": \"Q1\", \"End Date\": \"2020-12-26\", \"NetIncomeLoss (USD in Billions)\": 28.76}, {\"Fiscal Year\": 2021, \"Fiscal Quarter\": \"Q2\", \"End Date\": \"2021-03-27\", \"NetIncomeLoss (USD in Billions)\": 23.63}, {\"Fiscal Year\": 2021, \"Fiscal Quarter\": \"Q3\", \"End Date\": \"2021-06-26\", \"NetIncomeLoss (USD in Billions)\": 21.74}, {\"Fiscal Year\": 2021, \"Fiscal Quarter\": \"Q4\", \"End Date\": \"2021-09-25\", \"NetIncomeLoss (USD in Billions)\": 20.55}, {\"Fiscal Year\": 2022, \"Fiscal Quarter\": \"Q1\", \"End Date\": \"2021-12-25\", \"NetIncomeLoss (USD in Billions)\": 34.63}, {\"Fiscal Year\": 2022, \"Fiscal Quarter\": \"Q2\", \"End Date\": \"2022-03-26\", \"NetIncomeLoss (USD in Billions)\": 25.01}, {\"Fiscal Year\": 2022, \"Fiscal Quarter\": \"Q3\", \"End Date\": \"2022-06-25\", \"NetIncomeLoss (USD in Billions)\": 19.44}, {\"Fiscal Year\": 2022, \"Fiscal Quarter\": \"Q4\", \"End Date\": \"2022-09-24\", \"NetIncomeLoss (USD in Billions)\": 20.72}]}}, {\"mode\": \"vega-lite\"});\n</script>\n```\n:::\n:::\n\n\n",
    "supporting": [
      "company-financial-trends_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}